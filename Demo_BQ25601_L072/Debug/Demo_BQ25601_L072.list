
Demo_BQ25601_L072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  080046e8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080046e8  00006178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d96e  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002100  00000000  00000000  000139a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00015aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e2  00000000  00000000  00016610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c23  00000000  00000000  00016ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f487  00000000  00000000  0002bb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dddd  00000000  00000000  0003af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000b8dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000bb654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004644 	.word	0x08004644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004644 	.word	0x08004644

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_GPIO_EXTI_Callback>:
extern BQ25601_Data_TypeDef bq25601_registers;
extern uint8_t bq25601_vbus;
extern uint8_t bq25601_chg_current;
extern uint8_t bq25601_ntc;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BQ25601_INT_PIN) {
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d124      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x5e>
		// Write your code for interrupts with
		bq25601_read_all_registers(&bq25601_registers);
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x68>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 f8d2 	bl	8000668 <bq25601_read_all_registers>
		bq25601_vbus = bq25601_get_vbus_status();
 80004c4:	f000 f92c 	bl	8000720 <bq25601_get_vbus_status>
 80004c8:	0003      	movs	r3, r0
 80004ca:	001a      	movs	r2, r3
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x6c>)
 80004ce:	701a      	strb	r2, [r3, #0]
		bq25601_ntc = bq25601_get_ntc_fault();
 80004d0:	f000 f951 	bl	8000776 <bq25601_get_ntc_fault>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x70>)
 80004da:	701a      	strb	r2, [r3, #0]

		if((bq25601_vbus != BQ25601_NO_INPUT) &&(bq25601_ntc == BQ25601_NTC_NORMAL)) {
 80004dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x6c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d009      	beq.n	80004f8 <HAL_GPIO_EXTI_Callback+0x50>
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x70>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d105      	bne.n	80004f8 <HAL_GPIO_EXTI_Callback+0x50>
			bq25601_set_charge_current_limit(bq25601_chg_current);
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <HAL_GPIO_EXTI_Callback+0x74>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 f9c1 	bl	8000878 <bq25601_set_charge_current_limit>
		}
		else if(bq25601_ntc != BQ25601_NTC_NORMAL) {
			bq25601_write_ce_pin(1);
		}
	}
}
 80004f6:	e006      	b.n	8000506 <HAL_GPIO_EXTI_Callback+0x5e>
		else if(bq25601_ntc != BQ25601_NTC_NORMAL) {
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x70>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_GPIO_EXTI_Callback+0x5e>
			bq25601_write_ce_pin(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f000 f9a5 	bl	8000850 <bq25601_write_ce_pin>
}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	20000164 	.word	0x20000164
 8000514:	20000170 	.word	0x20000170
 8000518:	20000171 	.word	0x20000171
 800051c:	20000001 	.word	0x20000001

08000520 <bq25601_read_register>:
#endif

/*-------------------- F U N C T I O N S --------------------*/
/*-------------------- G E N E R A L --------------------*/
// Base function for read register
uint8_t bq25601_read_register(uint8_t register_number) {
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b089      	sub	sp, #36	@ 0x24
 8000524:	af04      	add	r7, sp, #16
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	uint8_t temp_reg_data = 0;
 800052c:	210f      	movs	r1, #15
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
#ifdef BQ25601_USE_HAL
	HAL_I2C_Mem_Read(&BQ25601_HI2C, BQ25601_I2C_ADDRESS<<1, register_number, 1, &temp_reg_data, 1, HAL_MAX_DELAY);
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b29a      	uxth	r2, r3
 800053a:	4809      	ldr	r0, [pc, #36]	@ (8000560 <bq25601_read_register+0x40>)
 800053c:	2301      	movs	r3, #1
 800053e:	425b      	negs	r3, r3
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	2301      	movs	r3, #1
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	000c      	movs	r4, r1
 8000548:	187b      	adds	r3, r7, r1
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	21d6      	movs	r1, #214	@ 0xd6
 8000550:	f001 fbd8 	bl	8001d04 <HAL_I2C_Mem_Read>
#elif defined(BQ25601_USE_CMSIS)
#endif
	return temp_reg_data;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	781b      	ldrb	r3, [r3, #0]
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b005      	add	sp, #20
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	2000002c 	.word	0x2000002c

08000564 <bq25601_write_register>:

// Base function for write register
void bq25601_write_register(uint8_t register_number, uint8_t data) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af04      	add	r7, sp, #16
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	1c0a      	adds	r2, r1, #0
 8000574:	701a      	strb	r2, [r3, #0]
#ifdef BQ25601_USE_HAL
	HAL_I2C_Mem_Write(&BQ25601_HI2C, BQ25601_I2C_ADDRESS<<1, register_number, 1, &data, 1, HAL_MAX_DELAY);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b29a      	uxth	r2, r3
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <bq25601_write_register+0x38>)
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	9302      	str	r3, [sp, #8]
 8000584:	2301      	movs	r3, #1
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	21d6      	movs	r1, #214	@ 0xd6
 8000590:	f001 fa8a 	bl	8001aa8 <HAL_I2C_Mem_Write>
#elif defined(BQ25601_USE_CMSIS)
#endif
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000002c 	.word	0x2000002c

080005a0 <bq25601_read_bit>:

// Base function for read bit register, returns bit with offset
uint8_t bq25601_read_bit(uint8_t register_number, uint8_t bit_mask) {
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	0002      	movs	r2, r0
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	1c0a      	adds	r2, r1, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	uint8_t temp_reg_data = 0;
 80005b2:	250f      	movs	r5, #15
 80005b4:	197b      	adds	r3, r7, r5
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
#ifdef BQ25601_USE_HAL
	temp_reg_data = bq25601_read_register(register_number);
 80005ba:	197c      	adds	r4, r7, r5
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffad 	bl	8000520 <bq25601_read_register>
 80005c6:	0003      	movs	r3, r0
 80005c8:	7023      	strb	r3, [r4, #0]
#elif defined(BQ25601_USE_CMSIS)
#endif
	temp_reg_data &= bit_mask;
 80005ca:	0028      	movs	r0, r5
 80005cc:	183b      	adds	r3, r7, r0
 80005ce:	183a      	adds	r2, r7, r0
 80005d0:	1db9      	adds	r1, r7, #6
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	7809      	ldrb	r1, [r1, #0]
 80005d6:	400a      	ands	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	return temp_reg_data;
 80005da:	183b      	adds	r3, r7, r0
 80005dc:	781b      	ldrb	r3, [r3, #0]
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b004      	add	sp, #16
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}

080005e6 <bq25601_write_bit>:

// Base function for write bit in register
void bq25601_write_bit(uint8_t register_number, uint8_t bit_mask, uint8_t bit_val) {
 80005e6:	b5b0      	push	{r4, r5, r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	0004      	movs	r4, r0
 80005ee:	0008      	movs	r0, r1
 80005f0:	0011      	movs	r1, r2
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	1c22      	adds	r2, r4, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	1c02      	adds	r2, r0, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	1d7b      	adds	r3, r7, #5
 8000600:	1c0a      	adds	r2, r1, #0
 8000602:	701a      	strb	r2, [r3, #0]
	uint8_t temp_reg_data = 0;
 8000604:	250f      	movs	r5, #15
 8000606:	197b      	adds	r3, r7, r5
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
#ifdef BQ25601_USE_HAL
	temp_reg_data = bq25601_read_register(register_number);
 800060c:	197c      	adds	r4, r7, r5
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff84 	bl	8000520 <bq25601_read_register>
 8000618:	0003      	movs	r3, r0
 800061a:	7023      	strb	r3, [r4, #0]
#elif defined(BQ25601_USE_CMSIS)
#endif
	if(bit_val) {
 800061c:	1d7b      	adds	r3, r7, #5
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <bq25601_write_bit+0x4e>
		temp_reg_data |= bit_mask;
 8000624:	197b      	adds	r3, r7, r5
 8000626:	1979      	adds	r1, r7, r5
 8000628:	1dba      	adds	r2, r7, #6
 800062a:	7809      	ldrb	r1, [r1, #0]
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	430a      	orrs	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e00c      	b.n	800064e <bq25601_write_bit+0x68>
	}
	else {
		temp_reg_data &= (~bit_mask);
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b25b      	sxtb	r3, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	210f      	movs	r1, #15
 8000640:	187a      	adds	r2, r7, r1
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	b252      	sxtb	r2, r2
 8000646:	4013      	ands	r3, r2
 8000648:	b25a      	sxtb	r2, r3
 800064a:	187b      	adds	r3, r7, r1
 800064c:	701a      	strb	r2, [r3, #0]
	}
#ifdef BQ25601_USE_HAL
	bq25601_write_register(register_number, temp_reg_data);
 800064e:	230f      	movs	r3, #15
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ff82 	bl	8000564 <bq25601_write_register>
#elif defined(BQ25601_USE_CMSIS)
#endif
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b004      	add	sp, #16
 8000666:	bdb0      	pop	{r4, r5, r7, pc}

08000668 <bq25601_read_all_registers>:

/*-------------------- R E A D --------------------*/
// Reads all registers, fills BQ25601_Data_TypeDef
void bq25601_read_all_registers(BQ25601_Data_TypeDef *regs_data) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	regs_data->BQ25601_REG00 = bq25601_read_register(BQ25601_REG00_ADDRESS);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff55 	bl	8000520 <bq25601_read_register>
 8000676:	0003      	movs	r3, r0
 8000678:	001a      	movs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	701a      	strb	r2, [r3, #0]
	regs_data->BQ25601_REG01 = bq25601_read_register(BQ25601_REG01_ADDRESS);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff4e 	bl	8000520 <bq25601_read_register>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	705a      	strb	r2, [r3, #1]
	regs_data->BQ25601_REG02 = bq25601_read_register(BQ25601_REG02_ADDRESS);
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff ff47 	bl	8000520 <bq25601_read_register>
 8000692:	0003      	movs	r3, r0
 8000694:	001a      	movs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	709a      	strb	r2, [r3, #2]
	regs_data->BQ25601_REG03 = bq25601_read_register(BQ25601_REG03_ADDRESS);
 800069a:	2003      	movs	r0, #3
 800069c:	f7ff ff40 	bl	8000520 <bq25601_read_register>
 80006a0:	0003      	movs	r3, r0
 80006a2:	001a      	movs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	70da      	strb	r2, [r3, #3]
	regs_data->BQ25601_REG04 = bq25601_read_register(BQ25601_REG04_ADDRESS);
 80006a8:	2004      	movs	r0, #4
 80006aa:	f7ff ff39 	bl	8000520 <bq25601_read_register>
 80006ae:	0003      	movs	r3, r0
 80006b0:	001a      	movs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
	regs_data->BQ25601_REG05 = bq25601_read_register(BQ25601_REG05_ADDRESS);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f7ff ff32 	bl	8000520 <bq25601_read_register>
 80006bc:	0003      	movs	r3, r0
 80006be:	001a      	movs	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	715a      	strb	r2, [r3, #5]
	regs_data->BQ25601_REG06 = bq25601_read_register(BQ25601_REG06_ADDRESS);
 80006c4:	2006      	movs	r0, #6
 80006c6:	f7ff ff2b 	bl	8000520 <bq25601_read_register>
 80006ca:	0003      	movs	r3, r0
 80006cc:	001a      	movs	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	719a      	strb	r2, [r3, #6]
	regs_data->BQ25601_REG07 = bq25601_read_register(BQ25601_REG07_ADDRESS);
 80006d2:	2007      	movs	r0, #7
 80006d4:	f7ff ff24 	bl	8000520 <bq25601_read_register>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	71da      	strb	r2, [r3, #7]
	regs_data->BQ25601_REG08 = bq25601_read_register(BQ25601_REG08_ADDRESS);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff1d 	bl	8000520 <bq25601_read_register>
 80006e6:	0003      	movs	r3, r0
 80006e8:	001a      	movs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	721a      	strb	r2, [r3, #8]
	regs_data->BQ25601_REG09 = bq25601_read_register(BQ25601_REG09_ADDRESS);
 80006ee:	2009      	movs	r0, #9
 80006f0:	f7ff ff16 	bl	8000520 <bq25601_read_register>
 80006f4:	0003      	movs	r3, r0
 80006f6:	001a      	movs	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	725a      	strb	r2, [r3, #9]
	regs_data->BQ25601_REG0A = bq25601_read_register(BQ25601_REG0A_ADDRESS);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f7ff ff0f 	bl	8000520 <bq25601_read_register>
 8000702:	0003      	movs	r3, r0
 8000704:	001a      	movs	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	729a      	strb	r2, [r3, #10]
	regs_data->BQ25601_REG0B = bq25601_read_register(BQ25601_REG0B_ADDRESS);
 800070a:	200b      	movs	r0, #11
 800070c:	f7ff ff08 	bl	8000520 <bq25601_read_register>
 8000710:	0003      	movs	r3, r0
 8000712:	001a      	movs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	72da      	strb	r2, [r3, #11]
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}

08000720 <bq25601_get_vbus_status>:

// Returns VBUS_STAT 2 1 0 like 0bxxx
uint8_t bq25601_get_vbus_status(void) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
	uint8_t reg08_data = 0;
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	reg08_data = bq25601_read_register(BQ25601_REG08_ADDRESS);
 800072c:	1dfc      	adds	r4, r7, #7
 800072e:	2008      	movs	r0, #8
 8000730:	f7ff fef6 	bl	8000520 <bq25601_read_register>
 8000734:	0003      	movs	r3, r0
 8000736:	7023      	strb	r3, [r4, #0]
	return (reg08_data >> 5);
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	b2db      	uxtb	r3, r3
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b003      	add	sp, #12
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <bq25601_get_chrg_status>:

// Returns CHRG_STAT 1 0 like 0bxx
uint8_t bq25601_get_chrg_status(void) {
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
	uint8_t reg08_data = 0;
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	reg08_data = bq25601_read_register(BQ25601_REG08_ADDRESS);
 8000754:	1dfc      	adds	r4, r7, #7
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff fee2 	bl	8000520 <bq25601_read_register>
 800075c:	0003      	movs	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
	return ((reg08_data & 0b00011000)>>3);
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	10db      	asrs	r3, r3, #3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2203      	movs	r2, #3
 800076a:	4013      	ands	r3, r2
 800076c:	b2db      	uxtb	r3, r3
}
 800076e:	0018      	movs	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	b003      	add	sp, #12
 8000774:	bd90      	pop	{r4, r7, pc}

08000776 <bq25601_get_ntc_fault>:

// Returns NTC_FAULT 2 1 0 like 0bxxx
uint8_t bq25601_get_ntc_fault(void) {
 8000776:	b590      	push	{r4, r7, lr}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
	uint8_t reg_09_data = bq25601_read_register(BQ25601_REG09_ADDRESS);
 800077c:	1dfc      	adds	r4, r7, #7
 800077e:	2009      	movs	r0, #9
 8000780:	f7ff fece 	bl	8000520 <bq25601_read_register>
 8000784:	0003      	movs	r3, r0
 8000786:	7023      	strb	r3, [r4, #0]
	reg_09_data &= (BQ25601_REG09_MSK_NTC_FAULT_2 | BQ25601_REG09_MSK_NTC_FAULT_1 | BQ25601_REG09_MSK_NTC_FAULT_0);
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	1dfa      	adds	r2, r7, #7
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	2107      	movs	r1, #7
 8000790:	400a      	ands	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
	return reg_09_data;
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b003      	add	sp, #12
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <bq25601_get_device_pn>:

// Returns device part number (id) like 0bxxx
uint8_t bq25601_get_device_pn(void) {
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
	uint8_t reg0b_data = 0;
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	reg0b_data = bq25601_read_register(BQ25601_REG0B_ADDRESS);
 80007ac:	1dfc      	adds	r4, r7, #7
 80007ae:	200b      	movs	r0, #11
 80007b0:	f7ff feb6 	bl	8000520 <bq25601_read_register>
 80007b4:	0003      	movs	r3, r0
 80007b6:	7023      	strb	r3, [r4, #0]
	return ((reg0b_data & 0b0111100)>>3);
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	10db      	asrs	r3, r3, #3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2207      	movs	r2, #7
 80007c2:	4013      	ands	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b003      	add	sp, #12
 80007cc:	bd90      	pop	{r4, r7, pc}

080007ce <bq25601_get_device_rev>:

//Returns device revision like 0bxx
uint8_t bq25601_get_device_rev(void) {
 80007ce:	b590      	push	{r4, r7, lr}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
	uint8_t reg0b_data = 0;
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
	reg0b_data = bq25601_read_register(BQ25601_REG0B_ADDRESS);
 80007da:	1dfc      	adds	r4, r7, #7
 80007dc:	200b      	movs	r0, #11
 80007de:	f7ff fe9f 	bl	8000520 <bq25601_read_register>
 80007e2:	0003      	movs	r3, r0
 80007e4:	7023      	strb	r3, [r4, #0]
	reg0b_data &= (BQ25601_REG0B_MSK_DEV_REV_1 | BQ25601_REG0B_MSK_DEV_REV_0);
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	1dfa      	adds	r2, r7, #7
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	2103      	movs	r1, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
	return reg0b_data;
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b003      	add	sp, #12
 80007fc:	bd90      	pop	{r4, r7, pc}
	...

08000800 <bq25601_read_qon_pin>:

/*-------------------- G P I O s --------------------*/
// Read QON pin
uint8_t bq25601_read_qon_pin(void) {
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	uint8_t temp_qon_pin_data;
	temp_qon_pin_data = HAL_GPIO_ReadPin(BQ25601_QON_GPIO_PORT, BQ25601_QON_PIN);
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <bq25601_read_qon_pin+0x24>)
 800080a:	2108      	movs	r1, #8
 800080c:	0018      	movs	r0, r3
 800080e:	f001 f85f 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000812:	0003      	movs	r3, r0
 8000814:	7023      	strb	r3, [r4, #0]
	return temp_qon_pin_data;
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b003      	add	sp, #12
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	50000400 	.word	0x50000400

08000828 <bq25601_read_stat_pin>:

// Read STAT pin
uint8_t bq25601_read_stat_pin(void) {
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
	uint8_t temp_stat_pin_data;
	temp_stat_pin_data = HAL_GPIO_ReadPin(BQ25601_STAT_GPIO_PORT, BQ25601_STAT_PIN);
 800082e:	1dfc      	adds	r4, r7, #7
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	005a      	lsls	r2, r3, #1
 8000834:	23a0      	movs	r3, #160	@ 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	0011      	movs	r1, r2
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f848 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000840:	0003      	movs	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]
	return temp_stat_pin_data;
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b003      	add	sp, #12
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <bq25601_write_ce_pin>:

// Write CE pin
void bq25601_write_ce_pin(uint8_t temp_ce_pin_val) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(BQ25601_CE_GPIO_PORT, BQ25601_CE_PIN, temp_ce_pin_val);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	015b      	lsls	r3, r3, #5
 8000864:	4803      	ldr	r0, [pc, #12]	@ (8000874 <bq25601_write_ce_pin+0x24>)
 8000866:	0019      	movs	r1, r3
 8000868:	f001 f84f 	bl	800190a <HAL_GPIO_WritePin>
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	50000800 	.word	0x50000800

08000878 <bq25601_set_charge_current_limit>:

/*-------------------- W R I T E --------------------*/
// Set charge current limit using masks: BQ25601_REG00_MSK_IINDPM
void bq25601_set_charge_current_limit(uint8_t iindpm_4_0) {
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	701a      	strb	r2, [r3, #0]
	uint8_t temp_reg_00_data = 0;
 8000884:	250f      	movs	r5, #15
 8000886:	197b      	adds	r3, r7, r5
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
	temp_reg_00_data = bq25601_read_register(BQ25601_REG00_ADDRESS);
 800088c:	197c      	adds	r4, r7, r5
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fe46 	bl	8000520 <bq25601_read_register>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	temp_reg_00_data &= (BQ25601_REG00_MSK_EN_HIZ | BQ25601_REG00_MSK_EN_ICHG_MON_1 | BQ25601_REG00_MSK_EN_ICHG_MON_0);
 8000898:	0028      	movs	r0, r5
 800089a:	183b      	adds	r3, r7, r0
 800089c:	183a      	adds	r2, r7, r0
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	211f      	movs	r1, #31
 80008a2:	438a      	bics	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
	temp_reg_00_data |= iindpm_4_0;
 80008a6:	183b      	adds	r3, r7, r0
 80008a8:	1839      	adds	r1, r7, r0
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7809      	ldrb	r1, [r1, #0]
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	701a      	strb	r2, [r3, #0]
	bq25601_write_register(BQ25601_REG00_ADDRESS, temp_reg_00_data);
 80008b4:	183b      	adds	r3, r7, r0
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	0019      	movs	r1, r3
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fe52 	bl	8000564 <bq25601_write_register>
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bdb0      	pop	{r4, r5, r7, pc}

080008c8 <bq25601_enter_ship_mode>:
	temp_reg_0b_data = bq25601_read_register(BQ25601_REG0B_ADDRESS);
	bq25601_write_register(BQ25601_REG0B_ADDRESS, temp_reg_0b_data | BQ25601_REG0B_MSK_REG_RST);
}

// Enter ship mode (BATFET_DIS) - turn off VSYS
void bq25601_enter_ship_mode(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	bq25601_write_bit(BQ25601_REG07_ADDRESS, BQ25601_REG07_MSK_BATFET_DIS, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2120      	movs	r1, #32
 80008d0:	2007      	movs	r0, #7
 80008d2:	f7ff fe88 	bl	80005e6 <bq25601_write_bit>
}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fb58 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f86a 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f968 	bl	8000bbc <MX_GPIO_Init>
  MX_DMA_Init();
 80008ec:	f000 f948 	bl	8000b80 <MX_DMA_Init>
  MX_I2C1_Init();
 80008f0:	f000 f8d6 	bl	8000aa0 <MX_I2C1_Init>
  MX_USART4_UART_Init();
 80008f4:	f000 f914 	bl	8000b20 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  // Init BQ25601:
  //bq25601_write_ce_pin(0);
  bq25601_read_all_registers(&chg_data);
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <main+0xb4>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff feb4 	bl	8000668 <bq25601_read_all_registers>
  bq25601_set_charge_current_limit(bq25601_chg_current);
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <main+0xb8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ffb7 	bl	8000878 <bq25601_set_charge_current_limit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bq25601_read_all_registers(&chg_data);
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <main+0xb4>)
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff feab 	bl	8000668 <bq25601_read_all_registers>

	  vbus_st = bq25601_get_vbus_status();
 8000912:	f7ff ff05 	bl	8000720 <bq25601_get_vbus_status>
 8000916:	0003      	movs	r3, r0
 8000918:	001a      	movs	r2, r3
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <main+0xbc>)
 800091c:	701a      	strb	r2, [r3, #0]
	  chg_st = bq25601_get_chrg_status();
 800091e:	f7ff ff13 	bl	8000748 <bq25601_get_chrg_status>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <main+0xc0>)
 8000928:	701a      	strb	r2, [r3, #0]
	  ntc = bq25601_get_ntc_fault();
 800092a:	f7ff ff24 	bl	8000776 <bq25601_get_ntc_fault>
 800092e:	0003      	movs	r3, r0
 8000930:	001a      	movs	r2, r3
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <main+0xc4>)
 8000934:	701a      	strb	r2, [r3, #0]
	  device_pn = bq25601_get_device_pn();
 8000936:	f7ff ff33 	bl	80007a0 <bq25601_get_device_pn>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <main+0xc8>)
 8000940:	701a      	strb	r2, [r3, #0]
	  rev = bq25601_get_device_rev();
 8000942:	f7ff ff44 	bl	80007ce <bq25601_get_device_rev>
 8000946:	0003      	movs	r3, r0
 8000948:	001a      	movs	r2, r3
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <main+0xcc>)
 800094c:	701a      	strb	r2, [r3, #0]

	  qon = bq25601_read_qon_pin();
 800094e:	f7ff ff57 	bl	8000800 <bq25601_read_qon_pin>
 8000952:	0003      	movs	r3, r0
 8000954:	001a      	movs	r2, r3
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <main+0xd0>)
 8000958:	701a      	strb	r2, [r3, #0]
	  stat = bq25601_read_stat_pin();
 800095a:	f7ff ff65 	bl	8000828 <bq25601_read_stat_pin>
 800095e:	0003      	movs	r3, r0
 8000960:	001a      	movs	r2, r3
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <main+0xd4>)
 8000964:	701a      	strb	r2, [r3, #0]

	  demo_bit = bq25601_read_bit(BQ25601_REG0A_ADDRESS, BQ25601_REG0A_MSK_VBUS_GD);
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	200a      	movs	r0, #10
 800096a:	f7ff fe19 	bl	80005a0 <bq25601_read_bit>
 800096e:	0003      	movs	r3, r0
 8000970:	001a      	movs	r2, r3
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <main+0xd8>)
 8000974:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	@ 0x64
 8000978:	f000 fb7c 	bl	8001074 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() > 60000)
 800097c:	f000 fb70 	bl	8001060 <HAL_GetTick>
 8000980:	0003      	movs	r3, r0
 8000982:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <main+0xdc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d9c0      	bls.n	800090a <main+0x2e>
		  bq25601_enter_ship_mode();
 8000988:	f7ff ff9e 	bl	80008c8 <bq25601_enter_ship_mode>
	  bq25601_read_all_registers(&chg_data);
 800098c:	e7bd      	b.n	800090a <main+0x2e>
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	20000150 	.word	0x20000150
 8000994:	20000001 	.word	0x20000001
 8000998:	2000015c 	.word	0x2000015c
 800099c:	2000015e 	.word	0x2000015e
 80009a0:	20000000 	.word	0x20000000
 80009a4:	2000015d 	.word	0x2000015d
 80009a8:	20000162 	.word	0x20000162
 80009ac:	2000015f 	.word	0x2000015f
 80009b0:	20000160 	.word	0x20000160
 80009b4:	20000161 	.word	0x20000161
 80009b8:	0000ea60 	.word	0x0000ea60

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09d      	sub	sp, #116	@ 0x74
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	2438      	movs	r4, #56	@ 0x38
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2338      	movs	r3, #56	@ 0x38
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 fe0d 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	2324      	movs	r3, #36	@ 0x24
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f003 fe05 	bl	80045ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e2:	003b      	movs	r3, r7
 80009e4:	0018      	movs	r0, r3
 80009e6:	2324      	movs	r3, #36	@ 0x24
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 fdfe 	bl	80045ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f0:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <SystemClock_Config+0xdc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a29      	ldr	r2, [pc, #164]	@ (8000a9c <SystemClock_Config+0xe0>)
 80009f6:	401a      	ands	r2, r3
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <SystemClock_Config+0xdc>)
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	0109      	lsls	r1, r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	0252      	lsls	r2, r2, #9
 8000a10:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2202      	movs	r2, #2
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0252      	lsls	r2, r2, #9
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	02d2      	lsls	r2, r2, #11
 8000a26:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	03d2      	lsls	r2, r2, #15
 8000a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fe24 	bl	8002680 <HAL_RCC_OscConfig>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f968 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	2124      	movs	r1, #36	@ 0x24
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	220f      	movs	r2, #15
 8000a46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2101      	movs	r1, #1
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 f9df 	bl	8002e28 <HAL_RCC_ClockConfig>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a6e:	f000 f94f 	bl	8000d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2208      	movs	r2, #8
 8000a76:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7e:	003b      	movs	r3, r7
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fbf3 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a8a:	f000 f941 	bl	8000d10 <Error_Handler>
  }
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b01d      	add	sp, #116	@ 0x74
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	40007000 	.word	0x40007000
 8000a9c:	ffffe7ff 	.word	0xffffe7ff

08000aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 ff4d 	bl	800197c <HAL_I2C_Init>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f913 	bl	8000d10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fd2e 	bl	8002550 <HAL_I2CEx_ConfigAnalogFilter>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f90a 	bl	8000d10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <MX_I2C1_Init+0x74>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fd71 	bl	80025e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f901 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	0060112f 	.word	0x0060112f

08000b20 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <MX_USART4_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b2c:	22e1      	movs	r2, #225	@ 0xe1
 8000b2e:	0312      	lsls	r2, r2, #12
 8000b30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <MX_USART4_UART_Init+0x58>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 fcdd 	bl	8003524 <HAL_UART_Init>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f8cf 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000080 	.word	0x20000080
 8000b7c:	40004c00 	.word	0x40004c00

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_DMA_Init+0x38>)
 8000b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_DMA_Init+0x38>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_DMA_Init+0x38>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f000 fb36 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f000 fb48 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b08b      	sub	sp, #44	@ 0x2c
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	2414      	movs	r4, #20
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2314      	movs	r3, #20
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f003 fd0d 	bl	80045ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bde:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b45      	ldr	r3, [pc, #276]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bee:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bf6:	4b42      	ldr	r3, [pc, #264]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b3f      	ldr	r3, [pc, #252]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c06:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b39      	ldr	r3, [pc, #228]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c1e:	4b38      	ldr	r3, [pc, #224]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c20:	2104      	movs	r1, #4
 8000c22:	430a      	orrs	r2, r1
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c26:	4b36      	ldr	r3, [pc, #216]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c36:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c38:	2108      	movs	r1, #8
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b30      	ldr	r3, [pc, #192]	@ (8000d00 <MX_GPIO_Init+0x144>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c42:	2208      	movs	r2, #8
 8000c44:	4013      	ands	r3, r2
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_CE_GPIO_Port, CHG_CE_Pin, GPIO_PIN_RESET);
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	015b      	lsls	r3, r3, #5
 8000c4e:	482d      	ldr	r0, [pc, #180]	@ (8000d04 <MX_GPIO_Init+0x148>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	0019      	movs	r1, r3
 8000c54:	f000 fe59 	bl	800190a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CHG_PG_Pin CHG_QON_Pin */
  GPIO_InitStruct.Pin = CHG_PG_Pin|CHG_QON_Pin;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2281      	movs	r2, #129	@ 0x81
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	4a26      	ldr	r2, [pc, #152]	@ (8000d08 <MX_GPIO_Init+0x14c>)
 8000c70:	0019      	movs	r1, r3
 8000c72:	0010      	movs	r0, r2
 8000c74:	f000 fcae 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_STAT_Pin */
  GPIO_InitStruct.Pin = CHG_STAT_Pin;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	193a      	adds	r2, r7, r4
 8000c8e:	23a0      	movs	r3, #160	@ 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fc9d 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_CE_Pin */
  GPIO_InitStruct.Pin = CHG_CE_Pin;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	0152      	lsls	r2, r2, #5
 8000ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	000c      	movs	r4, r1
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2201      	movs	r2, #1
 8000caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CHG_CE_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_GPIO_Init+0x148>)
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f000 fc88 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2204      	movs	r2, #4
 8000cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2284      	movs	r2, #132	@ 0x84
 8000cd0:	0392      	lsls	r2, r2, #14
 8000cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <MX_GPIO_Init+0x150>)
 8000cde:	0019      	movs	r1, r3
 8000ce0:	0010      	movs	r0, r2
 8000ce2:	f000 fc77 	bl	80015d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2006      	movs	r0, #6
 8000cec:	f000 fa92 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f000 faa4 	bl	800123e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b00b      	add	sp, #44	@ 0x2c
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	40021000 	.word	0x40021000
 8000d04:	50000800 	.word	0x50000800
 8000d08:	50000400 	.word	0x50000400
 8000d0c:	50000c00 	.word	0x50000c00

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <HAL_MspInit+0x24>)
 8000d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x24>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <HAL_MspInit+0x24>)
 8000d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_MspInit+0x24>)
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0549      	lsls	r1, r1, #21
 8000d36:	430a      	orrs	r2, r1
 8000d38:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_I2C_MspInit>:
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	240c      	movs	r4, #12
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	2314      	movs	r3, #20
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f003 fc48 	bl	80045ec <memset>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12a      	bne.n	8000dbc <HAL_I2C_MspInit+0x78>
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	2201      	movs	r2, #1
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	22c0      	movs	r2, #192	@ 0xc0
 8000d82:	00d2      	lsls	r2, r2, #3
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	0021      	movs	r1, r4
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2212      	movs	r2, #18
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2203      	movs	r2, #3
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	187a      	adds	r2, r7, r1
 8000da2:	23a0      	movs	r3, #160	@ 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fc13 	bl	80015d4 <HAL_GPIO_Init>
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	0389      	lsls	r1, r1, #14
 8000db8:	430a      	orrs	r2, r1
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b009      	add	sp, #36	@ 0x24
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_UART_MspInit>:
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	240c      	movs	r4, #12
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f003 fc04 	bl	80045ec <memset>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a30      	ldr	r2, [pc, #192]	@ (8000eac <HAL_UART_MspInit+0xe0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d15a      	bne.n	8000ea4 <HAL_UART_MspInit+0xd8>
 8000dee:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <HAL_UART_MspInit+0xe4>)
 8000df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000df2:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <HAL_UART_MspInit+0xe4>)
 8000df4:	2180      	movs	r1, #128	@ 0x80
 8000df6:	0309      	lsls	r1, r1, #12
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <HAL_UART_MspInit+0xe4>)
 8000dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <HAL_UART_MspInit+0xe4>)
 8000e02:	2104      	movs	r1, #4
 8000e04:	430a      	orrs	r2, r1
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <HAL_UART_MspInit+0xe4>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	22c0      	movs	r2, #192	@ 0xc0
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2202      	movs	r2, #2
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2206      	movs	r2, #6
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_UART_MspInit+0xe8>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	f000 fbc9 	bl	80015d4 <HAL_GPIO_Init>
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e44:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0xf0>)
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e50:	2210      	movs	r2, #16
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f9fc 	bl	8001278 <HAL_DMA_Init>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0xbc>
 8000e84:	f7ff ff44 	bl	8000d10 <Error_Handler>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f000 f9bb 	bl	8001214 <HAL_NVIC_SetPriority>
 8000e9e:	200e      	movs	r0, #14
 8000ea0:	f000 f9cd 	bl	800123e <HAL_NVIC_EnableIRQ>
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b009      	add	sp, #36	@ 0x24
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	40004c00 	.word	0x40004c00
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	50000800 	.word	0x50000800
 8000eb8:	20000108 	.word	0x20000108
 8000ebc:	40020030 	.word	0x40020030

08000ec0 <NMI_Handler>:
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <SVC_Handler>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <PendSV_Handler>:
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SysTick_Handler>:
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	f000 f8a8 	bl	800103c <HAL_IncTick>
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI2_3_IRQHandler>:
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	2004      	movs	r0, #4
 8000ef8:	f000 fd24 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA1_Channel2_3_IRQHandler>:
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 fab3 	bl	8001476 <HAL_DMA_IRQHandler>
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000108 	.word	0x20000108

08000f1c <USART4_5_IRQHandler>:
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <USART4_5_IRQHandler+0x14>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 fb52 	bl	80035cc <HAL_UART_IRQHandler>
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	20000080 	.word	0x20000080

08000f34 <SystemInit>:
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <Reset_Handler>:
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <LoopForever+0x2>)
 8000f42:	4685      	mov	sp, r0
 8000f44:	f7ff fff6 	bl	8000f34 <SystemInit>
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopForever+0x6>)
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopForever+0xa>)
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopForever+0xe>)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:
 8000f52:	58d4      	ldr	r4, [r2, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:
 8000f58:	18c4      	adds	r4, r0, r3
 8000f5a:	428c      	cmp	r4, r1
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopForever+0x12>)
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopForever+0x16>)
 8000f62:	2300      	movs	r3, #0
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:
 8000f6a:	42a2      	cmp	r2, r4
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
 8000f6e:	f003 fb45 	bl	80045fc <__libc_init_array>
 8000f72:	f7ff fcb3 	bl	80008dc <main>

08000f76 <LoopForever>:
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
 8000f78:	20005000 	.word	0x20005000
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000010 	.word	0x20000010
 8000f84:	080046d8 	.word	0x080046d8
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000178 	.word	0x20000178

08000f90 <ADC1_COMP_IRQHandler>:
 8000f90:	e7fe      	b.n	8000f90 <ADC1_COMP_IRQHandler>
	...

08000f94 <HAL_Init>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_Init+0x3c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Init+0x3c>)
 8000fa6:	2140      	movs	r1, #64	@ 0x40
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f811 	bl	8000fd4 <HAL_InitTick>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_Init+0x2a>
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e001      	b.n	8000fc2 <HAL_Init+0x2e>
 8000fbe:	f7ff fead 	bl	8000d1c <HAL_MspInit>
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_InitTick+0x5c>)
 8000fde:	681c      	ldr	r4, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_InitTick+0x60>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	23fa      	movs	r3, #250	@ 0xfa
 8000fe8:	0098      	lsls	r0, r3, #2
 8000fea:	f7ff f88d 	bl	8000108 <__udivsi3>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	f7ff f888 	bl	8000108 <__udivsi3>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 f92f 	bl	800125e <HAL_SYSTICK_Config>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <HAL_InitTick+0x34>
 8001004:	2301      	movs	r3, #1
 8001006:	e00f      	b.n	8001028 <HAL_InitTick+0x54>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d80b      	bhi.n	8001026 <HAL_InitTick+0x52>
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	2301      	movs	r3, #1
 8001012:	425b      	negs	r3, r3
 8001014:	2200      	movs	r2, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f8fc 	bl	8001214 <HAL_NVIC_SetPriority>
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_InitTick+0x64>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x54>
 8001026:	2301      	movs	r3, #1
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b003      	add	sp, #12
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	20000004 	.word	0x20000004
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_IncTick>:
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x1c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	001a      	movs	r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_IncTick+0x20>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	18d2      	adds	r2, r2, r3
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_IncTick+0x20>)
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000174 	.word	0x20000174

08001060 <HAL_GetTick>:
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
 8001064:	4b02      	ldr	r3, [pc, #8]	@ (8001070 <HAL_GetTick+0x10>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	20000174 	.word	0x20000174

08001074 <HAL_Delay>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	f7ff fff0 	bl	8001060 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3301      	adds	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	001a      	movs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	189b      	adds	r3, r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	f7ff ffe0 	bl	8001060 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	2000000c 	.word	0x2000000c

080010bc <__NVIC_EnableIRQ>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	0002      	movs	r2, r0
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ce:	d809      	bhi.n	80010e4 <__NVIC_EnableIRQ+0x28>
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	001a      	movs	r2, r3
 80010d6:	231f      	movs	r3, #31
 80010d8:	401a      	ands	r2, r3
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_EnableIRQ+0x30>)
 80010dc:	2101      	movs	r1, #1
 80010de:	4091      	lsls	r1, r2
 80010e0:	000a      	movs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b7f      	cmp	r3, #127	@ 0x7f
 8001104:	d828      	bhi.n	8001158 <__NVIC_SetPriority+0x68>
 8001106:	4a2f      	ldr	r2, [pc, #188]	@ (80011c4 <__NVIC_SetPriority+0xd4>)
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	33c0      	adds	r3, #192	@ 0xc0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	589b      	ldr	r3, [r3, r2]
 8001116:	1dfa      	adds	r2, r7, #7
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	0011      	movs	r1, r2
 800111c:	2203      	movs	r2, #3
 800111e:	400a      	ands	r2, r1
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	21ff      	movs	r1, #255	@ 0xff
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	43d2      	mvns	r2, r2
 800112a:	401a      	ands	r2, r3
 800112c:	0011      	movs	r1, r2
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	22ff      	movs	r2, #255	@ 0xff
 8001134:	401a      	ands	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	2303      	movs	r3, #3
 800113e:	4003      	ands	r3, r0
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	481f      	ldr	r0, [pc, #124]	@ (80011c4 <__NVIC_SetPriority+0xd4>)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	430a      	orrs	r2, r1
 8001150:	33c0      	adds	r3, #192	@ 0xc0
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	501a      	str	r2, [r3, r0]
 8001156:	e031      	b.n	80011bc <__NVIC_SetPriority+0xcc>
 8001158:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <__NVIC_SetPriority+0xd8>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0019      	movs	r1, r3
 8001160:	230f      	movs	r3, #15
 8001162:	400b      	ands	r3, r1
 8001164:	3b08      	subs	r3, #8
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3306      	adds	r3, #6
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	3304      	adds	r3, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1dfa      	adds	r2, r7, #7
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	0011      	movs	r1, r2
 8001178:	2203      	movs	r2, #3
 800117a:	400a      	ands	r2, r1
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	21ff      	movs	r1, #255	@ 0xff
 8001180:	4091      	lsls	r1, r2
 8001182:	000a      	movs	r2, r1
 8001184:	43d2      	mvns	r2, r2
 8001186:	401a      	ands	r2, r3
 8001188:	0011      	movs	r1, r2
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	22ff      	movs	r2, #255	@ 0xff
 8001190:	401a      	ands	r2, r3
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	2303      	movs	r3, #3
 800119a:	4003      	ands	r3, r0
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	409a      	lsls	r2, r3
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <__NVIC_SetPriority+0xd8>)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	001c      	movs	r4, r3
 80011a8:	230f      	movs	r3, #15
 80011aa:	4023      	ands	r3, r4
 80011ac:	3b08      	subs	r3, #8
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	430a      	orrs	r2, r1
 80011b2:	3306      	adds	r3, #6
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	18c3      	adds	r3, r0, r3
 80011b8:	3304      	adds	r3, #4
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b003      	add	sp, #12
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SysTick_Config>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	045b      	lsls	r3, r3, #17
 80011dc:	429a      	cmp	r2, r3
 80011de:	d301      	bcc.n	80011e4 <SysTick_Config+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e010      	b.n	8001206 <SysTick_Config+0x3a>
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <SysTick_Config+0x44>)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	3a01      	subs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	2301      	movs	r3, #1
 80011ee:	425b      	negs	r3, r3
 80011f0:	2103      	movs	r1, #3
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff7c 	bl	80010f0 <__NVIC_SetPriority>
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x44>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x44>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriority>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	210f      	movs	r1, #15
 8001220:	187b      	adds	r3, r7, r1
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	0002      	movs	r2, r0
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff33 	bl	80010bc <__NVIC_EnableIRQ>
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ffaf 	bl	80011cc <SysTick_Config>
 800126e:	0003      	movs	r3, r0
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Init>:
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_DMA_Init+0x12>
 8001286:	2301      	movs	r3, #1
 8001288:	e061      	b.n	800134e <HAL_DMA_Init+0xd6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a32      	ldr	r2, [pc, #200]	@ (8001358 <HAL_DMA_Init+0xe0>)
 8001290:	4694      	mov	ip, r2
 8001292:	4463      	add	r3, ip
 8001294:	2114      	movs	r1, #20
 8001296:	0018      	movs	r0, r3
 8001298:	f7fe ff36 	bl	8000108 <__udivsi3>
 800129c:	0003      	movs	r3, r0
 800129e:	009a      	lsls	r2, r3, #2
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a2d      	ldr	r2, [pc, #180]	@ (800135c <HAL_DMA_Init+0xe4>)
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2225      	movs	r2, #37	@ 0x25
 80012ae:	2102      	movs	r1, #2
 80012b0:	5499      	strb	r1, [r3, r2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_DMA_Init+0xe8>)
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	01db      	lsls	r3, r3, #7
 8001300:	429a      	cmp	r2, r3
 8001302:	d018      	beq.n	8001336 <HAL_DMA_Init+0xbe>
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <HAL_DMA_Init+0xec>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	211c      	movs	r1, #28
 800130e:	400b      	ands	r3, r1
 8001310:	210f      	movs	r1, #15
 8001312:	4099      	lsls	r1, r3
 8001314:	000b      	movs	r3, r1
 8001316:	43d9      	mvns	r1, r3
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_DMA_Init+0xec>)
 800131a:	400a      	ands	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_DMA_Init+0xec>)
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	201c      	movs	r0, #28
 800132c:	4003      	ands	r3, r0
 800132e:	409a      	lsls	r2, r3
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <HAL_DMA_Init+0xec>)
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2225      	movs	r2, #37	@ 0x25
 8001340:	2101      	movs	r1, #1
 8001342:	5499      	strb	r1, [r3, r2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]
 800134c:	2300      	movs	r3, #0
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	bffdfff8 	.word	0xbffdfff8
 800135c:	40020000 	.word	0x40020000
 8001360:	ffff800f 	.word	0xffff800f
 8001364:	400200a8 	.word	0x400200a8

08001368 <HAL_DMA_Abort>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2225      	movs	r2, #37	@ 0x25
 800137c:	5c9b      	ldrb	r3, [r3, r2]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d008      	beq.n	8001396 <HAL_DMA_Abort+0x2e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	63da      	str	r2, [r3, #60]	@ 0x3c
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2224      	movs	r2, #36	@ 0x24
 800138e:	2100      	movs	r1, #0
 8001390:	5499      	strb	r1, [r3, r2]
 8001392:	2301      	movs	r3, #1
 8001394:	e024      	b.n	80013e0 <HAL_DMA_Abort+0x78>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	210e      	movs	r1, #14
 80013a2:	438a      	bics	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	438a      	bics	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	221c      	movs	r2, #28
 80013bc:	401a      	ands	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	2101      	movs	r1, #1
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2225      	movs	r2, #37	@ 0x25
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2224      	movs	r2, #36	@ 0x24
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]
 80013da:	230f      	movs	r3, #15
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b004      	add	sp, #16
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_DMA_Abort_IT>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	210f      	movs	r1, #15
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2225      	movs	r2, #37	@ 0x25
 80013fc:	5c9b      	ldrb	r3, [r3, r2]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d006      	beq.n	8001412 <HAL_DMA_Abort_IT+0x2a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2204      	movs	r2, #4
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e02a      	b.n	8001468 <HAL_DMA_Abort_IT+0x80>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	210e      	movs	r1, #14
 800141e:	438a      	bics	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	438a      	bics	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	221c      	movs	r2, #28
 8001438:	401a      	ands	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	2101      	movs	r1, #1
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2225      	movs	r2, #37	@ 0x25
 800144a:	2101      	movs	r1, #1
 800144c:	5499      	strb	r1, [r3, r2]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2224      	movs	r2, #36	@ 0x24
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_DMA_Abort_IT+0x80>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	0010      	movs	r0, r2
 8001466:	4798      	blx	r3
 8001468:	230f      	movs	r3, #15
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_DMA_IRQHandler>:
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	221c      	movs	r2, #28
 8001494:	4013      	ands	r3, r2
 8001496:	2204      	movs	r2, #4
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	d026      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x7a>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	d022      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x7a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2220      	movs	r2, #32
 80014b2:	4013      	ands	r3, r2
 80014b4:	d107      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x50>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2104      	movs	r1, #4
 80014c2:	438a      	bics	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	221c      	movs	r2, #28
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	2104      	movs	r1, #4
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x6e>
 80014e2:	e071      	b.n	80015c8 <HAL_DMA_IRQHandler+0x152>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	0010      	movs	r0, r2
 80014ec:	4798      	blx	r3
 80014ee:	e06b      	b.n	80015c8 <HAL_DMA_IRQHandler+0x152>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f4:	221c      	movs	r2, #28
 80014f6:	4013      	ands	r3, r2
 80014f8:	2202      	movs	r2, #2
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	d02d      	beq.n	8001560 <HAL_DMA_IRQHandler+0xea>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d029      	beq.n	8001560 <HAL_DMA_IRQHandler+0xea>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2220      	movs	r2, #32
 8001514:	4013      	ands	r3, r2
 8001516:	d10b      	bne.n	8001530 <HAL_DMA_IRQHandler+0xba>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	210a      	movs	r1, #10
 8001524:	438a      	bics	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2225      	movs	r2, #37	@ 0x25
 800152c:	2101      	movs	r1, #1
 800152e:	5499      	strb	r1, [r3, r2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	221c      	movs	r2, #28
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	2102      	movs	r1, #2
 800153e:	4091      	lsls	r1, r2
 8001540:	000a      	movs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d039      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x152>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	0010      	movs	r0, r2
 800155c:	4798      	blx	r3
 800155e:	e033      	b.n	80015c8 <HAL_DMA_IRQHandler+0x152>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001564:	221c      	movs	r2, #28
 8001566:	4013      	ands	r3, r2
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	d02a      	beq.n	80015ca <HAL_DMA_IRQHandler+0x154>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2208      	movs	r2, #8
 8001578:	4013      	ands	r3, r2
 800157a:	d026      	beq.n	80015ca <HAL_DMA_IRQHandler+0x154>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	210e      	movs	r1, #14
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001590:	221c      	movs	r2, #28
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2225      	movs	r2, #37	@ 0x25
 80015aa:	2101      	movs	r1, #1
 80015ac:	5499      	strb	r1, [r3, r2]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2224      	movs	r2, #36	@ 0x24
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_DMA_IRQHandler+0x154>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	0010      	movs	r0, r2
 80015c6:	4798      	blx	r3
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e155      	b.n	8001898 <HAL_GPIO_Init+0x2c4>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <HAL_GPIO_Init+0x30>
 8001602:	e146      	b.n	8001892 <HAL_GPIO_Init+0x2be>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x48>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	4013      	ands	r3, r2
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xaa>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	2201      	movs	r2, #1
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xe6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x13a>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2107      	movs	r1, #7
 80016f2:	400b      	ands	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	50d1      	str	r1, [r2, r3]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d100      	bne.n	8001750 <HAL_GPIO_Init+0x17c>
 800174e:	e0a0      	b.n	8001892 <HAL_GPIO_Init+0x2be>
 8001750:	4b57      	ldr	r3, [pc, #348]	@ (80018b0 <HAL_GPIO_Init+0x2dc>)
 8001752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001754:	4b56      	ldr	r3, [pc, #344]	@ (80018b0 <HAL_GPIO_Init+0x2dc>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34
 800175c:	4a55      	ldr	r2, [pc, #340]	@ (80018b4 <HAL_GPIO_Init+0x2e0>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	589b      	ldr	r3, [r3, r2]
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2203      	movs	r2, #3
 800176e:	4013      	ands	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	409a      	lsls	r2, r3
 8001776:	0013      	movs	r3, r2
 8001778:	43da      	mvns	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	23a0      	movs	r3, #160	@ 0xa0
 8001784:	05db      	lsls	r3, r3, #23
 8001786:	429a      	cmp	r2, r3
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4a      	ldr	r2, [pc, #296]	@ (80018b8 <HAL_GPIO_Init+0x2e4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x1f2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a49      	ldr	r2, [pc, #292]	@ (80018bc <HAL_GPIO_Init+0x2e8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x1ee>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <HAL_GPIO_Init+0x2ec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x1ea>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <HAL_GPIO_Init+0x2f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x1e6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a46      	ldr	r2, [pc, #280]	@ (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x1e2>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e00a      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x1f8>
 80017ca:	2300      	movs	r3, #0
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	2103      	movs	r1, #3
 80017d0:	400a      	ands	r2, r1
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	4935      	ldr	r1, [pc, #212]	@ (80018b4 <HAL_GPIO_Init+0x2e0>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	505a      	str	r2, [r3, r1]
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43da      	mvns	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	035b      	lsls	r3, r3, #13
 8001802:	4013      	ands	r3, r2
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x23a>
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43da      	mvns	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	039b      	lsls	r3, r3, #14
 800182c:	4013      	ands	r3, r2
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x264>
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	029b      	lsls	r3, r3, #10
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x28e>
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4013      	ands	r3, r2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2b8>
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_GPIO_Init+0x2f8>)
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	40da      	lsrs	r2, r3
 80018a0:	1e13      	subs	r3, r2, #0
 80018a2:	d000      	beq.n	80018a6 <HAL_GPIO_Init+0x2d2>
 80018a4:	e6a2      	b.n	80015ec <HAL_GPIO_Init+0x18>
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b006      	add	sp, #24
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000800 	.word	0x50000800
 80018c0:	50000c00 	.word	0x50000c00
 80018c4:	50001000 	.word	0x50001000
 80018c8:	50001c00 	.word	0x50001c00
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_ReadPin>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	000a      	movs	r2, r1
 80018da:	1cbb      	adds	r3, r7, #2
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	1cba      	adds	r2, r7, #2
 80018e4:	8812      	ldrh	r2, [r2, #0]
 80018e6:	4013      	ands	r3, r2
 80018e8:	d004      	beq.n	80018f4 <HAL_GPIO_ReadPin+0x24>
 80018ea:	230f      	movs	r3, #15
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e003      	b.n	80018fc <HAL_GPIO_ReadPin+0x2c>
 80018f4:	230f      	movs	r3, #15
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	230f      	movs	r3, #15
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_GPIO_WritePin>:
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	0008      	movs	r0, r1
 8001914:	0011      	movs	r1, r2
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	1c02      	adds	r2, r0, #0
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	1c7b      	adds	r3, r7, #1
 800191e:	1c0a      	adds	r2, r1, #0
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	1c7b      	adds	r3, r7, #1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_GPIO_WritePin+0x2a>
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	e003      	b.n	800193c <HAL_GPIO_WritePin+0x32>
 8001934:	1cbb      	adds	r3, r7, #2
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_GPIO_EXTI_IRQHandler>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	0002      	movs	r2, r0
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	1dba      	adds	r2, r7, #6
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	4013      	ands	r3, r2
 800195a:	d008      	beq.n	800196e <HAL_GPIO_EXTI_IRQHandler+0x2a>
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800195e:	1dba      	adds	r2, r7, #6
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe fd9d 	bl	80004a8 <HAL_GPIO_EXTI_Callback>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e082      	b.n	8001a94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2241      	movs	r2, #65	@ 0x41
 8001992:	5c9b      	ldrb	r3, [r3, r2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2240      	movs	r2, #64	@ 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff f9cd 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2241      	movs	r2, #65	@ 0x41
 80019ae:	2124      	movs	r1, #36	@ 0x24
 80019b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4934      	ldr	r1, [pc, #208]	@ (8001a9c <HAL_I2C_Init+0x120>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4931      	ldr	r1, [pc, #196]	@ (8001aa0 <HAL_I2C_Init+0x124>)
 80019dc:	400a      	ands	r2, r1
 80019de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	0209      	lsls	r1, r1, #8
 80019f4:	430a      	orrs	r2, r1
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e007      	b.n	8001a0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2184      	movs	r1, #132	@ 0x84
 8001a04:	0209      	lsls	r1, r1, #8
 8001a06:	430a      	orrs	r2, r1
 8001a08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d104      	bne.n	8001a1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	491f      	ldr	r1, [pc, #124]	@ (8001aa4 <HAL_I2C_Init+0x128>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	491a      	ldr	r1, [pc, #104]	@ (8001aa0 <HAL_I2C_Init+0x124>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69d9      	ldr	r1, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2241      	movs	r2, #65	@ 0x41
 8001a80:	2120      	movs	r1, #32
 8001a82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2242      	movs	r2, #66	@ 0x42
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	f0ffffff 	.word	0xf0ffffff
 8001aa0:	ffff7fff 	.word	0xffff7fff
 8001aa4:	02008000 	.word	0x02008000

08001aa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	000c      	movs	r4, r1
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	1c22      	adds	r2, r4, #0
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	1c02      	adds	r2, r0, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	1dbb      	adds	r3, r7, #6
 8001ac8:	1c0a      	adds	r2, r1, #0
 8001aca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2241      	movs	r2, #65	@ 0x41
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d000      	beq.n	8001ada <HAL_I2C_Mem_Write+0x32>
 8001ad8:	e10c      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_I2C_Mem_Write+0x42>
 8001ae0:	232c      	movs	r3, #44	@ 0x2c
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ff      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2240      	movs	r2, #64	@ 0x40
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_Mem_Write+0x5c>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0f8      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	2101      	movs	r1, #1
 8001b0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff faa8 	bl	8001060 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	0219      	lsls	r1, r3, #8
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2319      	movs	r3, #25
 8001b20:	2201      	movs	r2, #1
 8001b22:	f000 fb0b 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e3      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2241      	movs	r2, #65	@ 0x41
 8001b32:	2121      	movs	r1, #33	@ 0x21
 8001b34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2242      	movs	r2, #66	@ 0x42
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	222c      	movs	r2, #44	@ 0x2c
 8001b4e:	18ba      	adds	r2, r7, r2
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	881c      	ldrh	r4, [r3, #0]
 8001b5e:	2308      	movs	r3, #8
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	230a      	movs	r3, #10
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	8819      	ldrh	r1, [r3, #0]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	0023      	movs	r3, r4
 8001b76:	f000 f9f9 	bl	8001f6c <I2C_RequestMemoryWrite>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2240      	movs	r2, #64	@ 0x40
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0b5      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2bff      	cmp	r3, #255	@ 0xff
 8001b92:	d911      	bls.n	8001bb8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	22ff      	movs	r2, #255	@ 0xff
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	045c      	lsls	r4, r3, #17
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	8819      	ldrh	r1, [r3, #0]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	0023      	movs	r3, r4
 8001bb2:	f000 fc93 	bl	80024dc <I2C_TransferConfig>
 8001bb6:	e012      	b.n	8001bde <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	049c      	lsls	r4, r3, #18
 8001bcc:	230a      	movs	r3, #10
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	8819      	ldrh	r1, [r3, #0]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	0023      	movs	r3, r4
 8001bda:	f000 fc7f 	bl	80024dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 faf7 	bl	80021d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e081      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03a      	beq.n	8001ca2 <HAL_I2C_Mem_Write+0x1fa>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d136      	bne.n	8001ca2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	f000 fa7b 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e053      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2bff      	cmp	r3, #255	@ 0xff
 8001c56:	d911      	bls.n	8001c7c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	22ff      	movs	r2, #255	@ 0xff
 8001c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	045c      	lsls	r4, r3, #17
 8001c68:	230a      	movs	r3, #10
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	8819      	ldrh	r1, [r3, #0]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	0023      	movs	r3, r4
 8001c76:	f000 fc31 	bl	80024dc <I2C_TransferConfig>
 8001c7a:	e012      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	049c      	lsls	r4, r3, #18
 8001c90:	230a      	movs	r3, #10
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	8819      	ldrh	r1, [r3, #0]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	0023      	movs	r3, r4
 8001c9e:	f000 fc1d 	bl	80024dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d198      	bne.n	8001bde <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fad6 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e01a      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	490b      	ldr	r1, [pc, #44]	@ (8001d00 <HAL_I2C_Mem_Write+0x258>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2241      	movs	r2, #65	@ 0x41
 8001cdc:	2120      	movs	r1, #32
 8001cde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2242      	movs	r2, #66	@ 0x42
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2240      	movs	r2, #64	@ 0x40
 8001cec:	2100      	movs	r1, #0
 8001cee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b007      	add	sp, #28
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	fe00e800 	.word	0xfe00e800

08001d04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	000c      	movs	r4, r1
 8001d0e:	0010      	movs	r0, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	230a      	movs	r3, #10
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	1c22      	adds	r2, r4, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	1c02      	adds	r2, r0, #0
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	1dbb      	adds	r3, r7, #6
 8001d24:	1c0a      	adds	r2, r1, #0
 8001d26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2241      	movs	r2, #65	@ 0x41
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d000      	beq.n	8001d36 <HAL_I2C_Mem_Read+0x32>
 8001d34:	e110      	b.n	8001f58 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_I2C_Mem_Read+0x42>
 8001d3c:	232c      	movs	r3, #44	@ 0x2c
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e103      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2240      	movs	r2, #64	@ 0x40
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2C_Mem_Read+0x5c>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0fc      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff f97a 	bl	8001060 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	0219      	lsls	r1, r3, #8
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f000 f9dd 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0e7      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2241      	movs	r2, #65	@ 0x41
 8001d8e:	2122      	movs	r1, #34	@ 0x22
 8001d90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2242      	movs	r2, #66	@ 0x42
 8001d96:	2140      	movs	r1, #64	@ 0x40
 8001d98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	222c      	movs	r2, #44	@ 0x2c
 8001daa:	18ba      	adds	r2, r7, r2
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db6:	1dbb      	adds	r3, r7, #6
 8001db8:	881c      	ldrh	r4, [r3, #0]
 8001dba:	2308      	movs	r3, #8
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	0023      	movs	r3, r4
 8001dd2:	f000 f92f 	bl	8002034 <I2C_RequestMemoryRead>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0b9      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2bff      	cmp	r3, #255	@ 0xff
 8001dee:	d911      	bls.n	8001e14 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	22ff      	movs	r2, #255	@ 0xff
 8001df4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	045c      	lsls	r4, r3, #17
 8001e00:	230a      	movs	r3, #10
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	8819      	ldrh	r1, [r3, #0]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	4b56      	ldr	r3, [pc, #344]	@ (8001f64 <HAL_I2C_Mem_Read+0x260>)
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	0023      	movs	r3, r4
 8001e0e:	f000 fb65 	bl	80024dc <I2C_TransferConfig>
 8001e12:	e012      	b.n	8001e3a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	049c      	lsls	r4, r3, #18
 8001e28:	230a      	movs	r3, #10
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	8819      	ldrh	r1, [r3, #0]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <HAL_I2C_Mem_Read+0x260>)
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	0023      	movs	r3, r4
 8001e36:	f000 fb51 	bl	80024dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	0013      	movs	r3, r2
 8001e44:	2200      	movs	r2, #0
 8001e46:	2104      	movs	r1, #4
 8001e48:	f000 f978 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e082      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03a      	beq.n	8001f06 <HAL_I2C_Mem_Read+0x202>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d136      	bne.n	8001f06 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	f000 f949 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e053      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2bff      	cmp	r3, #255	@ 0xff
 8001eba:	d911      	bls.n	8001ee0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	22ff      	movs	r2, #255	@ 0xff
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	045c      	lsls	r4, r3, #17
 8001ecc:	230a      	movs	r3, #10
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	8819      	ldrh	r1, [r3, #0]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	0023      	movs	r3, r4
 8001eda:	f000 faff 	bl	80024dc <I2C_TransferConfig>
 8001ede:	e012      	b.n	8001f06 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	049c      	lsls	r4, r3, #18
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	8819      	ldrh	r1, [r3, #0]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	0023      	movs	r3, r4
 8001f02:	f000 faeb 	bl	80024dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d194      	bne.n	8001e3a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f9a4 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e01a      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <HAL_I2C_Mem_Read+0x264>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2241      	movs	r2, #65	@ 0x41
 8001f40:	2120      	movs	r1, #32
 8001f42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2242      	movs	r2, #66	@ 0x42
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b007      	add	sp, #28
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	80002400 	.word	0x80002400
 8001f68:	fe00e800 	.word	0xfe00e800

08001f6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	000c      	movs	r4, r1
 8001f76:	0010      	movs	r0, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	250a      	movs	r5, #10
 8001f7c:	197b      	adds	r3, r7, r5
 8001f7e:	1c22      	adds	r2, r4, #0
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	2308      	movs	r3, #8
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	1c02      	adds	r2, r0, #0
 8001f88:	801a      	strh	r2, [r3, #0]
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	1c0a      	adds	r2, r1, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	045c      	lsls	r4, r3, #17
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	8819      	ldrh	r1, [r3, #0]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <I2C_RequestMemoryWrite+0xc4>)
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	0023      	movs	r3, r4
 8001fa6:	f000 fa99 	bl	80024dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f911 	bl	80021d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e033      	b.n	8002026 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fbe:	1dbb      	adds	r3, r7, #6
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fd4:	e019      	b.n	800200a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fea:	6a39      	ldr	r1, [r7, #32]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f8f2 	bl	80021d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e014      	b.n	8002026 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	0013      	movs	r3, r2
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	f000 f890 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	80002000 	.word	0x80002000

08002034 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	000c      	movs	r4, r1
 800203e:	0010      	movs	r0, r2
 8002040:	0019      	movs	r1, r3
 8002042:	250a      	movs	r5, #10
 8002044:	197b      	adds	r3, r7, r5
 8002046:	1c22      	adds	r2, r4, #0
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	2308      	movs	r3, #8
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	1c0a      	adds	r2, r1, #0
 8002056:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	197b      	adds	r3, r7, r5
 8002060:	8819      	ldrh	r1, [r3, #0]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <I2C_RequestMemoryRead+0xc0>)
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	f000 fa37 	bl	80024dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800206e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f8af 	bl	80021d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e033      	b.n	80020ea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800208a:	2308      	movs	r3, #8
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
 8002098:	e019      	b.n	80020ce <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800209a:	2308      	movs	r3, #8
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 f890 	bl	80021d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e014      	b.n	80020ea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c0:	2308      	movs	r3, #8
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020ce:	6a3a      	ldr	r2, [r7, #32]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	0013      	movs	r3, r2
 80020d8:	2200      	movs	r2, #0
 80020da:	2140      	movs	r1, #64	@ 0x40
 80020dc:	f000 f82e 	bl	800213c <I2C_WaitOnFlagUntilTimeout>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d001      	beq.n	80020e8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	80002000 	.word	0x80002000

080020f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d103      	bne.n	8002116 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	430a      	orrs	r2, r1
 8002132:	619a      	str	r2, [r3, #24]
  }
}
 8002134:	46c0      	nop			@ (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800214c:	e030      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	d02d      	beq.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002154:	f7fe ff84 	bl	8001060 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d302      	bcc.n	800216a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d122      	bne.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	425a      	negs	r2, r3
 800217a:	4153      	adcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	001a      	movs	r2, r3
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d113      	bne.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	2220      	movs	r2, #32
 800218e:	431a      	orrs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2241      	movs	r2, #65	@ 0x41
 8002198:	2120      	movs	r1, #32
 800219a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2242      	movs	r2, #66	@ 0x42
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	@ 0x40
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e00f      	b.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4013      	ands	r3, r2
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	425a      	negs	r2, r3
 80021c0:	4153      	adcs	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	001a      	movs	r2, r3
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d0bf      	beq.n	800214e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e4:	e032      	b.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 f87d 	bl	80022ec <I2C_IsErrorOccurred>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e030      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	d025      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7fe ff2e 	bl	8001060 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11a      	bne.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d013      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	2220      	movs	r2, #32
 800222a:	431a      	orrs	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2241      	movs	r2, #65	@ 0x41
 8002234:	2120      	movs	r1, #32
 8002236:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2242      	movs	r2, #66	@ 0x42
 800223c:	2100      	movs	r1, #0
 800223e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e007      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d1c5      	bne.n	80021e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b004      	add	sp, #16
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002270:	e02f      	b.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f837 	bl	80022ec <I2C_IsErrorOccurred>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d001      	beq.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02d      	b.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002286:	f7fe feeb 	bl	8001060 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d302      	bcc.n	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11a      	bne.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2220      	movs	r2, #32
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d013      	beq.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	2220      	movs	r2, #32
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2241      	movs	r2, #65	@ 0x41
 80022ba:	2120      	movs	r1, #32
 80022bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2242      	movs	r2, #66	@ 0x42
 80022c2:	2100      	movs	r1, #0
 80022c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2240      	movs	r2, #64	@ 0x40
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2220      	movs	r2, #32
 80022da:	4013      	ands	r3, r2
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d1c8      	bne.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2327      	movs	r3, #39	@ 0x27
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2210      	movs	r2, #16
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <I2C_IsErrorOccurred+0x2e>
 8002318:	e079      	b.n	800240e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2210      	movs	r2, #16
 8002320:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002322:	e057      	b.n	80023d4 <I2C_IsErrorOccurred+0xe8>
 8002324:	2227      	movs	r2, #39	@ 0x27
 8002326:	18bb      	adds	r3, r7, r2
 8002328:	18ba      	adds	r2, r7, r2
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	d04f      	beq.n	80023d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002334:	f7fe fe94 	bl	8001060 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <I2C_IsErrorOccurred+0x5e>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d144      	bne.n	80023d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002358:	2013      	movs	r0, #19
 800235a:	183b      	adds	r3, r7, r0
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	2142      	movs	r1, #66	@ 0x42
 8002360:	5c52      	ldrb	r2, [r2, r1]
 8002362:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	401a      	ands	r2, r3
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	429a      	cmp	r2, r3
 8002376:	d126      	bne.n	80023c6 <I2C_IsErrorOccurred+0xda>
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	429a      	cmp	r2, r3
 8002380:	d021      	beq.n	80023c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002382:	183b      	adds	r3, r7, r0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b20      	cmp	r3, #32
 8002388:	d01d      	beq.n	80023c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	01c9      	lsls	r1, r1, #7
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800239c:	f7fe fe60 	bl	8001060 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a4:	e00f      	b.n	80023c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023a6:	f7fe fe5b 	bl	8001060 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b19      	cmp	r3, #25
 80023b2:	d908      	bls.n	80023c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	2220      	movs	r2, #32
 80023b8:	4313      	orrs	r3, r2
 80023ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023bc:	2327      	movs	r3, #39	@ 0x27
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]

              break;
 80023c4:	e006      	b.n	80023d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d1e8      	bne.n	80023a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d004      	beq.n	80023ec <I2C_IsErrorOccurred+0x100>
 80023e2:	2327      	movs	r3, #39	@ 0x27
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d09b      	beq.n	8002324 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023ec:	2327      	movs	r3, #39	@ 0x27
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2220      	movs	r2, #32
 80023fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2204      	movs	r2, #4
 8002402:	4313      	orrs	r3, r2
 8002404:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002406:	2327      	movs	r3, #39	@ 0x27
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d00c      	beq.n	800243a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2201      	movs	r2, #1
 8002424:	4313      	orrs	r3, r2
 8002426:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002432:	2327      	movs	r3, #39	@ 0x27
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4013      	ands	r3, r2
 8002442:	d00c      	beq.n	800245e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2208      	movs	r2, #8
 8002448:	4313      	orrs	r3, r2
 800244a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002456:	2327      	movs	r3, #39	@ 0x27
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d00c      	beq.n	8002482 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2202      	movs	r2, #2
 800246c:	4313      	orrs	r3, r2
 800246e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800247a:	2327      	movs	r3, #39	@ 0x27
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002482:	2327      	movs	r3, #39	@ 0x27
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01d      	beq.n	80024c8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff fe32 	bl	80020f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	490e      	ldr	r1, [pc, #56]	@ (80024d8 <I2C_IsErrorOccurred+0x1ec>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2241      	movs	r2, #65	@ 0x41
 80024b4:	2120      	movs	r1, #32
 80024b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2242      	movs	r2, #66	@ 0x42
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80024c8:	2327      	movs	r3, #39	@ 0x27
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b00a      	add	sp, #40	@ 0x28
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	fe00e800 	.word	0xfe00e800

080024dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	0008      	movs	r0, r1
 80024e6:	0011      	movs	r1, r2
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	240a      	movs	r4, #10
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	2009      	movs	r0, #9
 80024f4:	183b      	adds	r3, r7, r0
 80024f6:	1c0a      	adds	r2, r1, #0
 80024f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	059b      	lsls	r3, r3, #22
 8002500:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002502:	183b      	adds	r3, r7, r0
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	0419      	lsls	r1, r3, #16
 8002508:	23ff      	movs	r3, #255	@ 0xff
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800250e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002516:	4313      	orrs	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002526:	0d51      	lsrs	r1, r2, #21
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	00d2      	lsls	r2, r2, #3
 800252c:	400a      	ands	r2, r1
 800252e:	4907      	ldr	r1, [pc, #28]	@ (800254c <I2C_TransferConfig+0x70>)
 8002530:	430a      	orrs	r2, r1
 8002532:	43d2      	mvns	r2, r2
 8002534:	401a      	ands	r2, r3
 8002536:	0011      	movs	r1, r2
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b007      	add	sp, #28
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	03ff63ff 	.word	0x03ff63ff

08002550 <HAL_I2CEx_ConfigAnalogFilter>:
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2241      	movs	r2, #65	@ 0x41
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d138      	bne.n	80025d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2240      	movs	r2, #64	@ 0x40
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002570:	2302      	movs	r3, #2
 8002572:	e032      	b.n	80025da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2240      	movs	r2, #64	@ 0x40
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2241      	movs	r2, #65	@ 0x41
 8002580:	2124      	movs	r1, #36	@ 0x24
 8002582:	5499      	strb	r1, [r3, r2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4911      	ldr	r1, [pc, #68]	@ (80025e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2241      	movs	r2, #65	@ 0x41
 80025c8:	2120      	movs	r1, #32
 80025ca:	5499      	strb	r1, [r3, r2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025d8:	2302      	movs	r3, #2
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	ffffefff 	.word	0xffffefff

080025e8 <HAL_I2CEx_ConfigDigitalFilter>:
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2241      	movs	r2, #65	@ 0x41
 80025f6:	5c9b      	ldrb	r3, [r3, r2]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d139      	bne.n	8002672 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2240      	movs	r2, #64	@ 0x40
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002608:	2302      	movs	r3, #2
 800260a:	e033      	b.n	8002674 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	2101      	movs	r1, #1
 8002612:	5499      	strb	r1, [r3, r2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2241      	movs	r2, #65	@ 0x41
 8002618:	2124      	movs	r1, #36	@ 0x24
 800261a:	5499      	strb	r1, [r3, r2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2101      	movs	r1, #1
 8002628:	438a      	bics	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2241      	movs	r2, #65	@ 0x41
 8002662:	2120      	movs	r1, #32
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002672:	2302      	movs	r3, #2
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	fffff0ff 	.word	0xfffff0ff

08002680 <HAL_RCC_OscConfig>:
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_RCC_OscConfig+0x14>
 800268e:	2301      	movs	r3, #1
 8002690:	f000 fbbf 	bl	8002e12 <HAL_RCC_OscConfig+0x792>
 8002694:	4bc9      	ldr	r3, [pc, #804]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	220c      	movs	r2, #12
 800269a:	4013      	ands	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	4bc7      	ldr	r3, [pc, #796]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d100      	bne.n	80026b6 <HAL_RCC_OscConfig+0x36>
 80026b4:	e07e      	b.n	80027b4 <HAL_RCC_OscConfig+0x134>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_OscConfig+0x4c>
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x68>
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_OscConfig+0x68>
 80026cc:	4bbb      	ldr	r3, [pc, #748]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	d100      	bne.n	80026da <HAL_RCC_OscConfig+0x5a>
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_OscConfig+0x132>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d167      	bne.n	80027b2 <HAL_RCC_OscConfig+0x132>
 80026e2:	2301      	movs	r3, #1
 80026e4:	f000 fb95 	bl	8002e12 <HAL_RCC_OscConfig+0x792>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x84>
 80026f4:	4bb1      	ldr	r3, [pc, #708]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4bb0      	ldr	r3, [pc, #704]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	0249      	lsls	r1, r1, #9
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e027      	b.n	8002754 <HAL_RCC_OscConfig+0xd4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	23a0      	movs	r3, #160	@ 0xa0
 800270a:	02db      	lsls	r3, r3, #11
 800270c:	429a      	cmp	r2, r3
 800270e:	d10e      	bne.n	800272e <HAL_RCC_OscConfig+0xae>
 8002710:	4baa      	ldr	r3, [pc, #680]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4ba9      	ldr	r3, [pc, #676]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002716:	2180      	movs	r1, #128	@ 0x80
 8002718:	02c9      	lsls	r1, r1, #11
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4ba7      	ldr	r3, [pc, #668]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4ba6      	ldr	r3, [pc, #664]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	0249      	lsls	r1, r1, #9
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e012      	b.n	8002754 <HAL_RCC_OscConfig+0xd4>
 800272e:	4ba3      	ldr	r3, [pc, #652]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4ba2      	ldr	r3, [pc, #648]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002734:	49a2      	ldr	r1, [pc, #648]	@ (80029c0 <HAL_RCC_OscConfig+0x340>)
 8002736:	400a      	ands	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	4ba0      	ldr	r3, [pc, #640]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4b9c      	ldr	r3, [pc, #624]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b9b      	ldr	r3, [pc, #620]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800274e:	499d      	ldr	r1, [pc, #628]	@ (80029c4 <HAL_RCC_OscConfig+0x344>)
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 800275c:	f7fe fc80 	bl	8001060 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e009      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
 8002766:	f7fe fc7b 	bl	8001060 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	@ 0x64
 8002772:	d902      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
 8002774:	2303      	movs	r3, #3
 8002776:	f000 fb4c 	bl	8002e12 <HAL_RCC_OscConfig+0x792>
 800277a:	4b90      	ldr	r3, [pc, #576]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	4013      	ands	r3, r2
 8002784:	d0ef      	beq.n	8002766 <HAL_RCC_OscConfig+0xe6>
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0x134>
 8002788:	f7fe fc6a 	bl	8001060 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x124>
 8002792:	f7fe fc65 	bl	8001060 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x124>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e336      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 80027a4:	4b85      	ldr	r3, [pc, #532]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x112>
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x134>
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x140>
 80027be:	e099      	b.n	80028f4 <HAL_RCC_OscConfig+0x274>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	2220      	movs	r2, #32
 80027ca:	4013      	ands	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_OscConfig+0x162>
 80027ce:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80027d4:	2120      	movs	r1, #32
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2220      	movs	r2, #32
 80027de:	4393      	bics	r3, r2
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_OscConfig+0x174>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d13e      	bne.n	800286c <HAL_RCC_OscConfig+0x1ec>
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d13b      	bne.n	800286c <HAL_RCC_OscConfig+0x1ec>
 80027f4:	4b71      	ldr	r3, [pc, #452]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2204      	movs	r2, #4
 80027fa:	4013      	ands	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_RCC_OscConfig+0x188>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x188>
 8002804:	2301      	movs	r3, #1
 8002806:	e304      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002808:	4b6c      	ldr	r3, [pc, #432]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x348>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	4b68      	ldr	r3, [pc, #416]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	4b67      	ldr	r3, [pc, #412]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2209      	movs	r2, #9
 8002824:	4393      	bics	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f000 fc42 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8002834:	0001      	movs	r1, r0
 8002836:	4b61      	ldr	r3, [pc, #388]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	220f      	movs	r2, #15
 800283e:	4013      	ands	r3, r2
 8002840:	4a62      	ldr	r2, [pc, #392]	@ (80029cc <HAL_RCC_OscConfig+0x34c>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	000a      	movs	r2, r1
 8002846:	40da      	lsrs	r2, r3
 8002848:	4b61      	ldr	r3, [pc, #388]	@ (80029d0 <HAL_RCC_OscConfig+0x350>)
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <HAL_RCC_OscConfig+0x354>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2513      	movs	r5, #19
 8002852:	197c      	adds	r4, r7, r5
 8002854:	0018      	movs	r0, r3
 8002856:	f7fe fbbd 	bl	8000fd4 <HAL_InitTick>
 800285a:	0003      	movs	r3, r0
 800285c:	7023      	strb	r3, [r4, #0]
 800285e:	197b      	adds	r3, r7, r5
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d046      	beq.n	80028f4 <HAL_RCC_OscConfig+0x274>
 8002866:	197b      	adds	r3, r7, r5
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	e2d2      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d027      	beq.n	80028c2 <HAL_RCC_OscConfig+0x242>
 8002872:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2209      	movs	r2, #9
 8002878:	4393      	bics	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	4b4f      	ldr	r3, [pc, #316]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800287e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f7fe fbec 	bl	8001060 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x220>
 800288e:	f7fe fbe7 	bl	8001060 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x220>
 800289c:	2303      	movs	r3, #3
 800289e:	e2b8      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 80028a0:	4b46      	ldr	r3, [pc, #280]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2204      	movs	r2, #4
 80028a6:	4013      	ands	r3, r2
 80028a8:	d0f1      	beq.n	800288e <HAL_RCC_OscConfig+0x20e>
 80028aa:	4b44      	ldr	r3, [pc, #272]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <HAL_RCC_OscConfig+0x348>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	4b40      	ldr	r3, [pc, #256]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	e018      	b.n	80028f4 <HAL_RCC_OscConfig+0x274>
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b3d      	ldr	r3, [pc, #244]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028c8:	2101      	movs	r1, #1
 80028ca:	438a      	bics	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f7fe fbc7 	bl	8001060 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x26a>
 80028d8:	f7fe fbc2 	bl	8001060 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x26a>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e293      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2204      	movs	r2, #4
 80028f0:	4013      	ands	r3, r2
 80028f2:	d1f1      	bne.n	80028d8 <HAL_RCC_OscConfig+0x258>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	4013      	ands	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_RCC_OscConfig+0x280>
 80028fe:	e0a2      	b.n	8002a46 <HAL_RCC_OscConfig+0x3c6>
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d140      	bne.n	8002988 <HAL_RCC_OscConfig+0x308>
 8002906:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d005      	beq.n	800291e <HAL_RCC_OscConfig+0x29e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x29e>
 800291a:	2301      	movs	r3, #1
 800291c:	e279      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <HAL_RCC_OscConfig+0x358>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800292c:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	0a19      	lsrs	r1, r3, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	061a      	lsls	r2, r3, #24
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	3301      	adds	r3, #1
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	0212      	lsls	r2, r2, #8
 8002952:	409a      	lsls	r2, r3
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	210f      	movs	r1, #15
 800295c:	400b      	ands	r3, r1
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x34c>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	40da      	lsrs	r2, r3
 8002964:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <HAL_RCC_OscConfig+0x350>)
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_RCC_OscConfig+0x354>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2513      	movs	r5, #19
 800296e:	197c      	adds	r4, r7, r5
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe fb2f 	bl	8000fd4 <HAL_InitTick>
 8002976:	0003      	movs	r3, r0
 8002978:	7023      	strb	r3, [r4, #0]
 800297a:	197b      	adds	r3, r7, r5
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d061      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3c6>
 8002982:	197b      	adds	r3, r7, r5
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	e244      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d040      	beq.n	8002a12 <HAL_RCC_OscConfig+0x392>
 8002990:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002996:	2180      	movs	r1, #128	@ 0x80
 8002998:	0049      	lsls	r1, r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f7fe fb5f 	bl	8001060 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e019      	b.n	80029dc <HAL_RCC_OscConfig+0x35c>
 80029a8:	f7fe fb5a 	bl	8001060 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d912      	bls.n	80029dc <HAL_RCC_OscConfig+0x35c>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e22b      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000
 80029c0:	fffeffff 	.word	0xfffeffff
 80029c4:	fffbffff 	.word	0xfffbffff
 80029c8:	ffffe0ff 	.word	0xffffe0ff
 80029cc:	0800465c 	.word	0x0800465c
 80029d0:	20000004 	.word	0x20000004
 80029d4:	20000008 	.word	0x20000008
 80029d8:	ffff1fff 	.word	0xffff1fff
 80029dc:	4bca      	ldr	r3, [pc, #808]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	d0df      	beq.n	80029a8 <HAL_RCC_OscConfig+0x328>
 80029e8:	4bc7      	ldr	r3, [pc, #796]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4ac7      	ldr	r2, [pc, #796]	@ (8002d0c <HAL_RCC_OscConfig+0x68c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029f6:	4bc4      	ldr	r3, [pc, #784]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	4bc2      	ldr	r3, [pc, #776]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	0a19      	lsrs	r1, r3, #8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	4bbf      	ldr	r3, [pc, #764]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	e019      	b.n	8002a46 <HAL_RCC_OscConfig+0x3c6>
 8002a12:	4bbd      	ldr	r3, [pc, #756]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4bbc      	ldr	r3, [pc, #752]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a18:	49bd      	ldr	r1, [pc, #756]	@ (8002d10 <HAL_RCC_OscConfig+0x690>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f7fe fb1f 	bl	8001060 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3ba>
 8002a28:	f7fe fb1a 	bl	8001060 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3ba>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1eb      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002a3a:	4bb3      	ldr	r3, [pc, #716]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3a8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_RCC_OscConfig+0x43e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d019      	beq.n	8002a8c <HAL_RCC_OscConfig+0x40c>
 8002a58:	4bab      	ldr	r3, [pc, #684]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a5c:	4baa      	ldr	r3, [pc, #680]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a64:	f7fe fafc 	bl	8001060 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x400>
 8002a6e:	f7fe faf7 	bl	8001060 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x400>
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1c8      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002a80:	4ba1      	ldr	r3, [pc, #644]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a84:	2202      	movs	r2, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f1      	beq.n	8002a6e <HAL_RCC_OscConfig+0x3ee>
 8002a8a:	e018      	b.n	8002abe <HAL_RCC_OscConfig+0x43e>
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a90:	4b9d      	ldr	r3, [pc, #628]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a98:	f7fe fae2 	bl	8001060 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x434>
 8002aa2:	f7fe fadd 	bl	8001060 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x434>
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1ae      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002ab4:	4b94      	ldr	r3, [pc, #592]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d1f1      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x422>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x44a>
 8002ac8:	e0ae      	b.n	8002c28 <HAL_RCC_OscConfig+0x5a8>
 8002aca:	2023      	movs	r0, #35	@ 0x23
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	055b      	lsls	r3, r3, #21
 8002ada:	4013      	ands	r3, r2
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_OscConfig+0x472>
 8002ade:	4b8a      	ldr	r3, [pc, #552]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae2:	4b89      	ldr	r3, [pc, #548]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0549      	lsls	r1, r1, #21
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
 8002aec:	183b      	adds	r3, r7, r0
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x694>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4b4>
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x694>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b84      	ldr	r3, [pc, #528]	@ (8002d14 <HAL_RCC_OscConfig+0x694>)
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	0049      	lsls	r1, r1, #1
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f7fe faa8 	bl	8001060 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x4a8>
 8002b16:	f7fe faa3 	bl	8001060 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	@ 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x4a8>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e174      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002b28:	4b7a      	ldr	r3, [pc, #488]	@ (8002d14 <HAL_RCC_OscConfig+0x694>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x496>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4d0>
 8002b40:	4b71      	ldr	r3, [pc, #452]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b44:	4b70      	ldr	r3, [pc, #448]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0049      	lsls	r1, r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b4e:	e031      	b.n	8002bb4 <HAL_RCC_OscConfig+0x534>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4f2>
 8002b58:	4b6b      	ldr	r3, [pc, #428]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b5e:	496c      	ldr	r1, [pc, #432]	@ (8002d10 <HAL_RCC_OscConfig+0x690>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b68:	4b67      	ldr	r3, [pc, #412]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b6a:	496b      	ldr	r1, [pc, #428]	@ (8002d18 <HAL_RCC_OscConfig+0x698>)
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b70:	e020      	b.n	8002bb4 <HAL_RCC_OscConfig+0x534>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	23a0      	movs	r3, #160	@ 0xa0
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10e      	bne.n	8002b9c <HAL_RCC_OscConfig+0x51c>
 8002b7e:	4b62      	ldr	r3, [pc, #392]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b82:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	00c9      	lsls	r1, r1, #3
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b90:	4b5d      	ldr	r3, [pc, #372]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b92:	2180      	movs	r1, #128	@ 0x80
 8002b94:	0049      	lsls	r1, r1, #1
 8002b96:	430a      	orrs	r2, r1
 8002b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x534>
 8002b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ba0:	4b59      	ldr	r3, [pc, #356]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ba2:	495b      	ldr	r1, [pc, #364]	@ (8002d10 <HAL_RCC_OscConfig+0x690>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ba8:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bac:	4b56      	ldr	r3, [pc, #344]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002bae:	495a      	ldr	r1, [pc, #360]	@ (8002d18 <HAL_RCC_OscConfig+0x698>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCC_OscConfig+0x568>
 8002bbc:	f7fe fa50 	bl	8001060 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_OscConfig+0x55a>
 8002bc6:	f7fe fa4b 	bl	8001060 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_RCC_OscConfig+0x69c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x55a>
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e11b      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002bda:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d0ef      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x546>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x592>
 8002be8:	f7fe fa3a 	bl	8001060 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_OscConfig+0x586>
 8002bf2:	f7fe fa35 	bl	8001060 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a47      	ldr	r2, [pc, #284]	@ (8002d1c <HAL_RCC_OscConfig+0x69c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x586>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e105      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002c06:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1ef      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x572>
 8002c12:	2323      	movs	r3, #35	@ 0x23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5a8>
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c20:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c22:	493f      	ldr	r1, [pc, #252]	@ (8002d20 <HAL_RCC_OscConfig+0x6a0>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d049      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x646>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d026      	beq.n	8002c88 <HAL_RCC_OscConfig+0x608>
 8002c3a:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	4b30      	ldr	r3, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c52:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <HAL_RCC_OscConfig+0x6a4>)
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	4b33      	ldr	r3, [pc, #204]	@ (8002d24 <HAL_RCC_OscConfig+0x6a4>)
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	0189      	lsls	r1, r1, #6
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	621a      	str	r2, [r3, #32]
 8002c60:	f7fe f9fe 	bl	8001060 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x5fc>
 8002c6a:	f7fe f9f9 	bl	8001060 <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x5fc>
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0ca      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0f1      	beq.n	8002c6a <HAL_RCC_OscConfig+0x5ea>
 8002c86:	e01e      	b.n	8002cc6 <HAL_RCC_OscConfig+0x646>
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	438a      	bics	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	4b23      	ldr	r3, [pc, #140]	@ (8002d24 <HAL_RCC_OscConfig+0x6a4>)
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_RCC_OscConfig+0x6a4>)
 8002c9a:	4923      	ldr	r1, [pc, #140]	@ (8002d28 <HAL_RCC_OscConfig+0x6a8>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	621a      	str	r2, [r3, #32]
 8002ca0:	f7fe f9de 	bl	8001060 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x63c>
 8002caa:	f7fe f9d9 	bl	8001060 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x63c>
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0aa      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d1f1      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d100      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x650>
 8002cce:	e09f      	b.n	8002e10 <HAL_RCC_OscConfig+0x790>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d100      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x658>
 8002cd6:	e078      	b.n	8002dca <HAL_RCC_OscConfig+0x74a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d159      	bne.n	8002d94 <HAL_RCC_OscConfig+0x714>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <HAL_RCC_OscConfig+0x688>)
 8002ce6:	4911      	ldr	r1, [pc, #68]	@ (8002d2c <HAL_RCC_OscConfig+0x6ac>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f7fe f9b8 	bl	8001060 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x6b0>
 8002cf6:	f7fe f9b3 	bl	8001060 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d915      	bls.n	8002d30 <HAL_RCC_OscConfig+0x6b0>
 8002d04:	2303      	movs	r3, #3
 8002d06:	e084      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	ffff1fff 	.word	0xffff1fff
 8002d10:	fffffeff 	.word	0xfffffeff
 8002d14:	40007000 	.word	0x40007000
 8002d18:	fffffbff 	.word	0xfffffbff
 8002d1c:	00001388 	.word	0x00001388
 8002d20:	efffffff 	.word	0xefffffff
 8002d24:	40010000 	.word	0x40010000
 8002d28:	ffffdfff 	.word	0xffffdfff
 8002d2c:	feffffff 	.word	0xfeffffff
 8002d30:	4b3a      	ldr	r3, [pc, #232]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	049b      	lsls	r3, r3, #18
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d1dc      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x676>
 8002d3c:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a37      	ldr	r2, [pc, #220]	@ (8002e20 <HAL_RCC_OscConfig+0x7a0>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	431a      	orrs	r2, r3
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b2e      	ldr	r3, [pc, #184]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d62:	2180      	movs	r1, #128	@ 0x80
 8002d64:	0449      	lsls	r1, r1, #17
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f7fe f979 	bl	8001060 <HAL_GetTick>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x706>
 8002d74:	f7fe f974 	bl	8001060 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x706>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e045      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	049b      	lsls	r3, r3, #18
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x6f4>
 8002d92:	e03d      	b.n	8002e10 <HAL_RCC_OscConfig+0x790>
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002d9a:	4922      	ldr	r1, [pc, #136]	@ (8002e24 <HAL_RCC_OscConfig+0x7a4>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f7fe f95e 	bl	8001060 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x73c>
 8002daa:	f7fe f959 	bl	8001060 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x73c>
 8002db8:	2303      	movs	r3, #3
 8002dba:	e02a      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	049b      	lsls	r3, r3, #18
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x72a>
 8002dc8:	e022      	b.n	8002e10 <HAL_RCC_OscConfig+0x790>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x756>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e01d      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_OscConfig+0x79c>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	401a      	ands	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d10f      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78c>
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	23f0      	movs	r3, #240	@ 0xf0
 8002df0:	039b      	lsls	r3, r3, #14
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78c>
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	23c0      	movs	r3, #192	@ 0xc0
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	401a      	ands	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_OscConfig+0x790>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x792>
 8002e10:	2300      	movs	r3, #0
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b00a      	add	sp, #40	@ 0x28
 8002e18:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	ff02ffff 	.word	0xff02ffff
 8002e24:	feffffff 	.word	0xfeffffff

08002e28 <HAL_RCC_ClockConfig>:
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e128      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002e3c:	4b96      	ldr	r3, [pc, #600]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d91e      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x60>
 8002e4a:	4b93      	ldr	r3, [pc, #588]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	4b90      	ldr	r3, [pc, #576]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f7fe f900 	bl	8001060 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e009      	b.n	8002e7a <HAL_RCC_ClockConfig+0x52>
 8002e66:	f7fe f8fb 	bl	8001060 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	4a8a      	ldr	r2, [pc, #552]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x52>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e109      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002e7a:	4b87      	ldr	r3, [pc, #540]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1ee      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x3e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x7e>
 8002e92:	4b83      	ldr	r3, [pc, #524]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	22f0      	movs	r2, #240	@ 0xf0
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x8a>
 8002eb0:	e089      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x19e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xa2>
 8002eba:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	029b      	lsls	r3, r3, #10
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d120      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xe0>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0e1      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xba>
 8002ed2:	4b73      	ldr	r3, [pc, #460]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	049b      	lsls	r3, r3, #18
 8002eda:	4013      	ands	r3, r2
 8002edc:	d114      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xe0>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0d5      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd0>
 8002eea:	4b6d      	ldr	r3, [pc, #436]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xe0>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ca      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002ef8:	4b69      	ldr	r3, [pc, #420]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4013      	ands	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xe0>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0c2      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002f08:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4b62      	ldr	r3, [pc, #392]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	f7fe f8a0 	bl	8001060 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d111      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x128>
 8002f2c:	e009      	b.n	8002f42 <HAL_RCC_ClockConfig+0x11a>
 8002f2e:	f7fe f897 	bl	8001060 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	4a58      	ldr	r2, [pc, #352]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x11a>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0a5      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002f42:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	220c      	movs	r2, #12
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d1ef      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x106>
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x19e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d111      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x154>
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_ClockConfig+0x146>
 8002f5a:	f7fe f881 	bl	8001060 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a4d      	ldr	r2, [pc, #308]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x146>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e08f      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	220c      	movs	r2, #12
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d1ef      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x132>
 8002f7a:	e024      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x19e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d11b      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x194>
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_ClockConfig+0x172>
 8002f86:	f7fe f86b 	bl	8001060 <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	4a42      	ldr	r2, [pc, #264]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x172>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e079      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002f9a:	4b41      	ldr	r3, [pc, #260]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d1ef      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x15e>
 8002fa6:	e00e      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x19e>
 8002fa8:	f7fe f85a 	bl	8001060 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x194>
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e068      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8002fbc:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x180>
 8002fc6:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d21e      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x1ea>
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4393      	bics	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f7fe f83b 	bl	8001060 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e009      	b.n	8003004 <HAL_RCC_ClockConfig+0x1dc>
 8002ff0:	f7fe f836 	bl	8001060 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	4a28      	ldr	r2, [pc, #160]	@ (800309c <HAL_RCC_ClockConfig+0x274>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_ClockConfig+0x1dc>
 8003000:	2303      	movs	r3, #3
 8003002:	e044      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 8003004:	4b24      	ldr	r3, [pc, #144]	@ (8003098 <HAL_RCC_ClockConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d1ee      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1c8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	4013      	ands	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_RCC_ClockConfig+0x208>
 800301c:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a20      	ldr	r2, [pc, #128]	@ (80030a4 <HAL_RCC_ClockConfig+0x27c>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2208      	movs	r2, #8
 8003036:	4013      	ands	r3, r2
 8003038:	d00a      	beq.n	8003050 <HAL_RCC_ClockConfig+0x228>
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_RCC_ClockConfig+0x280>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00da      	lsls	r2, r3, #3
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	f000 f832 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003054:	0001      	movs	r1, r0
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_ClockConfig+0x278>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	220f      	movs	r2, #15
 800305e:	4013      	ands	r3, r2
 8003060:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <HAL_RCC_ClockConfig+0x284>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	000a      	movs	r2, r1
 8003066:	40da      	lsrs	r2, r3
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_ClockConfig+0x288>)
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <HAL_RCC_ClockConfig+0x28c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	250b      	movs	r5, #11
 8003072:	197c      	adds	r4, r7, r5
 8003074:	0018      	movs	r0, r3
 8003076:	f7fd ffad 	bl	8000fd4 <HAL_InitTick>
 800307a:	0003      	movs	r3, r0
 800307c:	7023      	strb	r3, [r4, #0]
 800307e:	197b      	adds	r3, r7, r5
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_RCC_ClockConfig+0x264>
 8003086:	197b      	adds	r3, r7, r5
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	e000      	b.n	800308e <HAL_RCC_ClockConfig+0x266>
 800308c:	2300      	movs	r3, #0
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bdb0      	pop	{r4, r5, r7, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	40022000 	.word	0x40022000
 800309c:	00001388 	.word	0x00001388
 80030a0:	40021000 	.word	0x40021000
 80030a4:	fffff8ff 	.word	0xfffff8ff
 80030a8:	ffffc7ff 	.word	0xffffc7ff
 80030ac:	0800465c 	.word	0x0800465c
 80030b0:	20000004 	.word	0x20000004
 80030b4:	20000008 	.word	0x20000008

080030b8 <HAL_RCC_GetSysClockFreq>:
 80030b8:	b5b0      	push	{r4, r5, r7, lr}
 80030ba:	b08e      	sub	sp, #56	@ 0x38
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c6:	230c      	movs	r3, #12
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d014      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x40>
 80030ce:	d900      	bls.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80030d0:	e07b      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x112>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x24>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030da:	e076      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x112>
 80030dc:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
 80030e6:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ea:	e07c      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x12e>
 80030ec:	4b42      	ldr	r3, [pc, #264]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f0:	e079      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x12e>
 80030f2:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f6:	e076      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x12e>
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	0c9a      	lsrs	r2, r3, #18
 80030fc:	230f      	movs	r3, #15
 80030fe:	401a      	ands	r2, r3
 8003100:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x144>)
 8003102:	5c9b      	ldrb	r3, [r3, r2]
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003108:	0d9a      	lsrs	r2, r3, #22
 800310a:	2303      	movs	r3, #3
 800310c:	4013      	ands	r3, r2
 800310e:	3301      	adds	r3, #1
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	025b      	lsls	r3, r3, #9
 800311a:	4013      	ands	r3, r2
 800311c:	d01a      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x9c>
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	4a34      	ldr	r2, [pc, #208]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x140>)
 8003128:	2300      	movs	r3, #0
 800312a:	69b8      	ldr	r0, [r7, #24]
 800312c:	69f9      	ldr	r1, [r7, #28]
 800312e:	f7fd f897 	bl	8000260 <__aeabi_lmul>
 8003132:	0002      	movs	r2, r0
 8003134:	000b      	movs	r3, r1
 8003136:	0010      	movs	r0, r2
 8003138:	0019      	movs	r1, r3
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f7fd f86b 	bl	8000220 <__aeabi_uldivmod>
 800314a:	0002      	movs	r2, r0
 800314c:	000b      	movs	r3, r1
 800314e:	0013      	movs	r3, r2
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
 8003152:	e037      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x10c>
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	4013      	ands	r3, r2
 800315c:	d01a      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0xdc>
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4a23      	ldr	r2, [pc, #140]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003168:	2300      	movs	r3, #0
 800316a:	68b8      	ldr	r0, [r7, #8]
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	f7fd f877 	bl	8000260 <__aeabi_lmul>
 8003172:	0002      	movs	r2, r0
 8003174:	000b      	movs	r3, r1
 8003176:	0010      	movs	r0, r2
 8003178:	0019      	movs	r1, r3
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f7fd f84b 	bl	8000220 <__aeabi_uldivmod>
 800318a:	0002      	movs	r2, r0
 800318c:	000b      	movs	r3, r1
 800318e:	0013      	movs	r3, r2
 8003190:	637b      	str	r3, [r7, #52]	@ 0x34
 8003192:	e017      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x10c>
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	0018      	movs	r0, r3
 8003198:	2300      	movs	r3, #0
 800319a:	0019      	movs	r1, r3
 800319c:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800319e:	2300      	movs	r3, #0
 80031a0:	f7fd f85e 	bl	8000260 <__aeabi_lmul>
 80031a4:	0002      	movs	r2, r0
 80031a6:	000b      	movs	r3, r1
 80031a8:	0010      	movs	r0, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	001c      	movs	r4, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	001d      	movs	r5, r3
 80031b4:	0022      	movs	r2, r4
 80031b6:	002b      	movs	r3, r5
 80031b8:	f7fd f832 	bl	8000220 <__aeabi_uldivmod>
 80031bc:	0002      	movs	r2, r0
 80031be:	000b      	movs	r3, r1
 80031c0:	0013      	movs	r3, r2
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c8:	e00d      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x12e>
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	2207      	movs	r2, #7
 80031d2:	4013      	ands	r3, r2
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	3301      	adds	r3, #1
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	0212      	lsls	r2, r2, #8
 80031de:	409a      	lsls	r2, r3
 80031e0:	0013      	movs	r3, r2
 80031e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b00e      	add	sp, #56	@ 0x38
 80031ee:	bdb0      	pop	{r4, r5, r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	003d0900 	.word	0x003d0900
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	08004674 	.word	0x08004674

08003200 <HAL_RCC_GetHCLKFreq>:
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
 8003204:	4b02      	ldr	r3, [pc, #8]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x10>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	20000004 	.word	0x20000004

08003214 <HAL_RCC_GetPCLK1Freq>:
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
 8003218:	f7ff fff2 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 800321c:	0001      	movs	r1, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	2207      	movs	r2, #7
 8003226:	4013      	ands	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x28>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	40d9      	lsrs	r1, r3
 800322e:	000b      	movs	r3, r1
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	0800466c 	.word	0x0800466c

08003240 <HAL_RCC_GetPCLK2Freq>:
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	0001      	movs	r1, r0
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	2207      	movs	r2, #7
 8003252:	4013      	ands	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	40d9      	lsrs	r1, r3
 800325a:	000b      	movs	r3, r1
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	40021000 	.word	0x40021000
 8003268:	0800466c 	.word	0x0800466c

0800326c <HAL_RCCEx_PeriphCLKConfig>:
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	2017      	movs	r0, #23
 8003276:	183b      	adds	r3, r7, r0
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2220      	movs	r2, #32
 8003282:	4013      	ands	r3, r2
 8003284:	d100      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003286:	e0c7      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003288:	4b9b      	ldr	r3, [pc, #620]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800328a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	055b      	lsls	r3, r3, #21
 8003290:	4013      	ands	r3, r2
 8003292:	d109      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003294:	4b98      	ldr	r3, [pc, #608]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003298:	4b97      	ldr	r3, [pc, #604]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	0549      	lsls	r1, r1, #21
 800329e:	430a      	orrs	r2, r1
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	4b94      	ldr	r3, [pc, #592]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d11a      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80032b4:	4b91      	ldr	r3, [pc, #580]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b90      	ldr	r3, [pc, #576]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032ba:	2180      	movs	r1, #128	@ 0x80
 80032bc:	0049      	lsls	r1, r1, #1
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f7fd fecd 	bl	8001060 <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	e008      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032cc:	f7fd fec8 	bl	8001060 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032da:	2303      	movs	r3, #3
 80032dc:	e107      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x282>
 80032de:	4b87      	ldr	r3, [pc, #540]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80032ea:	4b83      	ldr	r3, [pc, #524]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	23c0      	movs	r3, #192	@ 0xc0
 80032f0:	039b      	lsls	r3, r3, #14
 80032f2:	4013      	ands	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	23c0      	movs	r3, #192	@ 0xc0
 80032fc:	039b      	lsls	r3, r3, #14
 80032fe:	4013      	ands	r3, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	d013      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	@ 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	401a      	ands	r2, r3
 8003310:	23c0      	movs	r3, #192	@ 0xc0
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	429a      	cmp	r2, r3
 8003316:	d10a      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003318:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	401a      	ands	r2, r3
 8003322:	2380      	movs	r3, #128	@ 0x80
 8003324:	029b      	lsls	r3, r3, #10
 8003326:	429a      	cmp	r2, r3
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800332a:	2301      	movs	r3, #1
 800332c:	e0df      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x282>
 800332e:	4b72      	ldr	r3, [pc, #456]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003332:	23c0      	movs	r3, #192	@ 0xc0
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	4013      	ands	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03b      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	23c0      	movs	r3, #192	@ 0xc0
 8003346:	029b      	lsls	r3, r3, #10
 8003348:	4013      	ands	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d033      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d02e      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800335a:	4b67      	ldr	r3, [pc, #412]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335e:	4a68      	ldr	r2, [pc, #416]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003366:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003368:	4b63      	ldr	r3, [pc, #396]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	0309      	lsls	r1, r1, #12
 800336e:	430a      	orrs	r2, r1
 8003370:	651a      	str	r2, [r3, #80]	@ 0x50
 8003372:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003374:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003376:	4b60      	ldr	r3, [pc, #384]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003378:	4962      	ldr	r1, [pc, #392]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800337a:	400a      	ands	r2, r1
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50
 800337e:	4b5e      	ldr	r3, [pc, #376]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	651a      	str	r2, [r3, #80]	@ 0x50
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d014      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800338e:	f7fd fe67 	bl	8001060 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e009      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003398:	f7fd fe62 	bl	8001060 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	4a59      	ldr	r2, [pc, #356]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0a0      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x282>
 80033ac:	4b52      	ldr	r3, [pc, #328]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2220      	movs	r2, #32
 80033be:	4013      	ands	r3, r2
 80033c0:	d01f      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	23c0      	movs	r3, #192	@ 0xc0
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	401a      	ands	r2, r3
 80033cc:	23c0      	movs	r3, #192	@ 0xc0
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d10c      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x182>
 80033d4:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a4c      	ldr	r2, [pc, #304]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	23c0      	movs	r3, #192	@ 0xc0
 80033e4:	039b      	lsls	r3, r3, #14
 80033e6:	401a      	ands	r2, r3
 80033e8:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b42      	ldr	r3, [pc, #264]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	23c0      	movs	r3, #192	@ 0xc0
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	401a      	ands	r2, r3
 80033fc:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	651a      	str	r2, [r3, #80]	@ 0x50
 8003402:	2317      	movs	r3, #23
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800340c:	4b3a      	ldr	r3, [pc, #232]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800340e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003410:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003412:	493f      	ldr	r1, [pc, #252]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003414:	400a      	ands	r2, r1
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003422:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	2203      	movs	r2, #3
 8003428:	4393      	bics	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003432:	430a      	orrs	r2, r1
 8003434:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003444:	220c      	movs	r2, #12
 8003446:	4393      	bics	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003450:	430a      	orrs	r2, r1
 8003452:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2204      	movs	r2, #4
 800345a:	4013      	ands	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800345e:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	4a2c      	ldr	r2, [pc, #176]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800346e:	430a      	orrs	r2, r1
 8003470:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	4013      	ands	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x224>
 800347c:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003480:	4a25      	ldr	r2, [pc, #148]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800348c:	430a      	orrs	r2, r1
 800348e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a0:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	4013      	ands	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x262>
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2280      	movs	r2, #128	@ 0x80
 80034d4:	4013      	ands	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x280>
 80034d8:	4b07      	ldr	r3, [pc, #28]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ec:	2300      	movs	r3, #0
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b006      	add	sp, #24
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
 8003500:	fffcffff 	.word	0xfffcffff
 8003504:	fff7ffff 	.word	0xfff7ffff
 8003508:	00001388 	.word	0x00001388
 800350c:	ffcfffff 	.word	0xffcfffff
 8003510:	efffffff 	.word	0xefffffff
 8003514:	fffff3ff 	.word	0xfffff3ff
 8003518:	ffffcfff 	.word	0xffffcfff
 800351c:	fbffffff 	.word	0xfbffffff
 8003520:	fff3ffff 	.word	0xfff3ffff

08003524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e044      	b.n	80035c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2278      	movs	r2, #120	@ 0x78
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f7fd fc3f 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2224      	movs	r2, #36	@ 0x24
 8003552:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 fb2e 	bl	8003bc8 <UART_SetConfig>
 800356c:	0003      	movs	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e024      	b.n	80035c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fdbf 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	490d      	ldr	r1, [pc, #52]	@ (80035c8 <HAL_UART_Init+0xa4>)
 8003592:	400a      	ands	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	212a      	movs	r1, #42	@ 0x2a
 80035a2:	438a      	bics	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 fe57 	bl	800426c <UART_CheckIdleState>
 80035be:	0003      	movs	r3, r0
}
 80035c0:	0018      	movs	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	ffffb7ff 	.word	0xffffb7ff

080035cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b0ab      	sub	sp, #172	@ 0xac
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	22a4      	movs	r2, #164	@ 0xa4
 80035dc:	18b9      	adds	r1, r7, r2
 80035de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	20a0      	movs	r0, #160	@ 0xa0
 80035e8:	1839      	adds	r1, r7, r0
 80035ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	219c      	movs	r1, #156	@ 0x9c
 80035f4:	1879      	adds	r1, r7, r1
 80035f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035f8:	0011      	movs	r1, r2
 80035fa:	18bb      	adds	r3, r7, r2
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a99      	ldr	r2, [pc, #612]	@ (8003864 <HAL_UART_IRQHandler+0x298>)
 8003600:	4013      	ands	r3, r2
 8003602:	2298      	movs	r2, #152	@ 0x98
 8003604:	18bc      	adds	r4, r7, r2
 8003606:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003608:	18bb      	adds	r3, r7, r2
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003610:	187b      	adds	r3, r7, r1
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	4013      	ands	r3, r2
 8003618:	d00f      	beq.n	800363a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361a:	183b      	adds	r3, r7, r0
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	4013      	ands	r3, r2
 8003622:	d00a      	beq.n	800363a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003628:	2b00      	cmp	r3, #0
 800362a:	d100      	bne.n	800362e <HAL_UART_IRQHandler+0x62>
 800362c:	e2a0      	b.n	8003b70 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	0010      	movs	r0, r2
 8003636:	4798      	blx	r3
      }
      return;
 8003638:	e29a      	b.n	8003b70 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800363a:	2398      	movs	r3, #152	@ 0x98
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d100      	bne.n	8003646 <HAL_UART_IRQHandler+0x7a>
 8003644:	e114      	b.n	8003870 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003646:	239c      	movs	r3, #156	@ 0x9c
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	d106      	bne.n	8003660 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003652:	23a0      	movs	r3, #160	@ 0xa0
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a83      	ldr	r2, [pc, #524]	@ (8003868 <HAL_UART_IRQHandler+0x29c>)
 800365a:	4013      	ands	r3, r2
 800365c:	d100      	bne.n	8003660 <HAL_UART_IRQHandler+0x94>
 800365e:	e107      	b.n	8003870 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003660:	23a4      	movs	r3, #164	@ 0xa4
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d012      	beq.n	8003692 <HAL_UART_IRQHandler+0xc6>
 800366c:	23a0      	movs	r3, #160	@ 0xa0
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4013      	ands	r3, r2
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2284      	movs	r2, #132	@ 0x84
 8003686:	589b      	ldr	r3, [r3, r2]
 8003688:	2201      	movs	r2, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2184      	movs	r1, #132	@ 0x84
 8003690:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003692:	23a4      	movs	r3, #164	@ 0xa4
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2202      	movs	r2, #2
 800369a:	4013      	ands	r3, r2
 800369c:	d011      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
 800369e:	239c      	movs	r3, #156	@ 0x9c
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2284      	movs	r2, #132	@ 0x84
 80036b6:	589b      	ldr	r3, [r3, r2]
 80036b8:	2204      	movs	r2, #4
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2184      	movs	r1, #132	@ 0x84
 80036c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036c2:	23a4      	movs	r3, #164	@ 0xa4
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2204      	movs	r2, #4
 80036ca:	4013      	ands	r3, r2
 80036cc:	d011      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
 80036ce:	239c      	movs	r3, #156	@ 0x9c
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2204      	movs	r2, #4
 80036e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2284      	movs	r2, #132	@ 0x84
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	2202      	movs	r2, #2
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2184      	movs	r1, #132	@ 0x84
 80036f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036f2:	23a4      	movs	r3, #164	@ 0xa4
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2208      	movs	r2, #8
 80036fa:	4013      	ands	r3, r2
 80036fc:	d017      	beq.n	800372e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036fe:	23a0      	movs	r3, #160	@ 0xa0
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2220      	movs	r2, #32
 8003706:	4013      	ands	r3, r2
 8003708:	d105      	bne.n	8003716 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800370a:	239c      	movs	r3, #156	@ 0x9c
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003714:	d00b      	beq.n	800372e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2208      	movs	r2, #8
 800371c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2284      	movs	r2, #132	@ 0x84
 8003722:	589b      	ldr	r3, [r3, r2]
 8003724:	2208      	movs	r2, #8
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2184      	movs	r1, #132	@ 0x84
 800372c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800372e:	23a4      	movs	r3, #164	@ 0xa4
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2380      	movs	r3, #128	@ 0x80
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	4013      	ands	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_UART_IRQHandler+0x198>
 800373c:	23a0      	movs	r3, #160	@ 0xa0
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	04db      	lsls	r3, r3, #19
 8003746:	4013      	ands	r3, r2
 8003748:	d00c      	beq.n	8003764 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2284      	movs	r2, #132	@ 0x84
 8003758:	589b      	ldr	r3, [r3, r2]
 800375a:	2220      	movs	r2, #32
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2184      	movs	r1, #132	@ 0x84
 8003762:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2284      	movs	r2, #132	@ 0x84
 8003768:	589b      	ldr	r3, [r3, r2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d100      	bne.n	8003770 <HAL_UART_IRQHandler+0x1a4>
 800376e:	e201      	b.n	8003b74 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003770:	23a4      	movs	r3, #164	@ 0xa4
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2220      	movs	r2, #32
 8003778:	4013      	ands	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800377c:	23a0      	movs	r3, #160	@ 0xa0
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	d008      	beq.n	800379a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	0010      	movs	r0, r2
 8003798:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2284      	movs	r2, #132	@ 0x84
 800379e:	589b      	ldr	r3, [r3, r2]
 80037a0:	2194      	movs	r1, #148	@ 0x94
 80037a2:	187a      	adds	r2, r7, r1
 80037a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d004      	beq.n	80037be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2228      	movs	r2, #40	@ 0x28
 80037ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037bc:	d047      	beq.n	800384e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fe65 	bl	8004490 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2240      	movs	r2, #64	@ 0x40
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d137      	bne.n	8003844 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80037da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037dc:	2090      	movs	r0, #144	@ 0x90
 80037de:	183a      	adds	r2, r7, r0
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	2301      	movs	r3, #1
 80037e4:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2140      	movs	r1, #64	@ 0x40
 80037fa:	438a      	bics	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003806:	f383 8810 	msr	PRIMASK, r3
}
 800380a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <HAL_UART_IRQHandler+0x2a0>)
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003820:	0018      	movs	r0, r3
 8003822:	f7fd fde1 	bl	80013e8 <HAL_DMA_Abort_IT>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d01a      	beq.n	8003860 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003834:	0018      	movs	r0, r3
 8003836:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e012      	b.n	8003860 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f9af 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003842:	e00d      	b.n	8003860 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f9aa 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e008      	b.n	8003860 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 f9a5 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2284      	movs	r2, #132	@ 0x84
 800385a:	2100      	movs	r1, #0
 800385c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800385e:	e189      	b.n	8003b74 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	46c0      	nop			@ (mov r8, r8)
    return;
 8003862:	e187      	b.n	8003b74 <HAL_UART_IRQHandler+0x5a8>
 8003864:	0000080f 	.word	0x0000080f
 8003868:	04000120 	.word	0x04000120
 800386c:	08004559 	.word	0x08004559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	2b01      	cmp	r3, #1
 8003876:	d000      	beq.n	800387a <HAL_UART_IRQHandler+0x2ae>
 8003878:	e13b      	b.n	8003af2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800387a:	23a4      	movs	r3, #164	@ 0xa4
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d100      	bne.n	8003888 <HAL_UART_IRQHandler+0x2bc>
 8003886:	e134      	b.n	8003af2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003888:	23a0      	movs	r3, #160	@ 0xa0
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2210      	movs	r2, #16
 8003890:	4013      	ands	r3, r2
 8003892:	d100      	bne.n	8003896 <HAL_UART_IRQHandler+0x2ca>
 8003894:	e12d      	b.n	8003af2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2240      	movs	r2, #64	@ 0x40
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d000      	beq.n	80038ae <HAL_UART_IRQHandler+0x2e2>
 80038ac:	e0a1      	b.n	80039f2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	217e      	movs	r1, #126	@ 0x7e
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <HAL_UART_IRQHandler+0x2fa>
 80038c4:	e158      	b.n	8003b78 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2258      	movs	r2, #88	@ 0x58
 80038ca:	5a9b      	ldrh	r3, [r3, r2]
 80038cc:	187a      	adds	r2, r7, r1
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d300      	bcc.n	80038d6 <HAL_UART_IRQHandler+0x30a>
 80038d4:	e150      	b.n	8003b78 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	187a      	adds	r2, r7, r1
 80038da:	215a      	movs	r1, #90	@ 0x5a
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2220      	movs	r2, #32
 80038ea:	4013      	ands	r3, r2
 80038ec:	d16f      	bne.n	80039ce <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ee:	f3ef 8310 	mrs	r3, PRIMASK
 80038f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038f8:	2301      	movs	r3, #1
 80038fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	499e      	ldr	r1, [pc, #632]	@ (8003b88 <HAL_UART_IRQHandler+0x5bc>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003916:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003920:	f3ef 8310 	mrs	r3, PRIMASK
 8003924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	677b      	str	r3, [r7, #116]	@ 0x74
 800392a:	2301      	movs	r3, #1
 800392c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	438a      	bics	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	673b      	str	r3, [r7, #112]	@ 0x70
 800395c:	2301      	movs	r3, #1
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2140      	movs	r1, #64	@ 0x40
 8003974:	438a      	bics	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800397a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	2120      	movs	r1, #32
 800398a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003992:	f3ef 8310 	mrs	r3, PRIMASK
 8003996:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800399c:	2301      	movs	r3, #1
 800399e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2110      	movs	r1, #16
 80039b4:	438a      	bics	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fd fccd 	bl	8001368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2258      	movs	r2, #88	@ 0x58
 80039d8:	5a9a      	ldrh	r2, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	215a      	movs	r1, #90	@ 0x5a
 80039de:	5a5b      	ldrh	r3, [r3, r1]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 f8e0 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f0:	e0c2      	b.n	8003b78 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2258      	movs	r2, #88	@ 0x58
 80039f6:	5a99      	ldrh	r1, [r3, r2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	225a      	movs	r2, #90	@ 0x5a
 80039fc:	5a9b      	ldrh	r3, [r3, r2]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	208e      	movs	r0, #142	@ 0x8e
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	1a8a      	subs	r2, r1, r2
 8003a06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	225a      	movs	r2, #90	@ 0x5a
 8003a0c:	5a9b      	ldrh	r3, [r3, r2]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d100      	bne.n	8003a16 <HAL_UART_IRQHandler+0x44a>
 8003a14:	e0b2      	b.n	8003b7c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d100      	bne.n	8003a20 <HAL_UART_IRQHandler+0x454>
 8003a1e:	e0ad      	b.n	8003b7c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a28:	2488      	movs	r4, #136	@ 0x88
 8003a2a:	193a      	adds	r2, r7, r4
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f383 8810 	msr	PRIMASK, r3
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4951      	ldr	r1, [pc, #324]	@ (8003b8c <HAL_UART_IRQHandler+0x5c0>)
 8003a46:	400a      	ands	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	2484      	movs	r4, #132	@ 0x84
 8003a62:	193a      	adds	r2, r7, r4
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			@ (mov r8, r8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	438a      	bics	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	2120      	movs	r1, #32
 8003a96:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aac:	2480      	movs	r4, #128	@ 0x80
 8003aae:	193a      	adds	r2, r7, r4
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	f383 8810 	msr	PRIMASK, r3
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2110      	movs	r1, #16
 8003aca:	438a      	bics	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0011      	movs	r1, r2
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f860 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af0:	e044      	b.n	8003b7c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003af2:	23a4      	movs	r3, #164	@ 0xa4
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	035b      	lsls	r3, r3, #13
 8003afc:	4013      	ands	r3, r2
 8003afe:	d010      	beq.n	8003b22 <HAL_UART_IRQHandler+0x556>
 8003b00:	239c      	movs	r3, #156	@ 0x9c
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	03db      	lsls	r3, r3, #15
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2280      	movs	r2, #128	@ 0x80
 8003b14:	0352      	lsls	r2, r2, #13
 8003b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 fd5e 	bl	80045dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b20:	e02f      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b22:	23a4      	movs	r3, #164	@ 0xa4
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b2e:	23a0      	movs	r3, #160	@ 0xa0
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01e      	beq.n	8003b80 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	0010      	movs	r0, r2
 8003b4a:	4798      	blx	r3
    }
    return;
 8003b4c:	e018      	b.n	8003b80 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b4e:	23a4      	movs	r3, #164	@ 0xa4
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2240      	movs	r2, #64	@ 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
 8003b5a:	23a0      	movs	r3, #160	@ 0xa0
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2240      	movs	r2, #64	@ 0x40
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00d      	beq.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 fd0c 	bl	8004586 <UART_EndTransmit_IT>
    return;
 8003b6e:	e008      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	e006      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	e004      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	e002      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b80:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b02b      	add	sp, #172	@ 0xac
 8003b86:	bd90      	pop	{r4, r7, pc}
 8003b88:	fffffeff 	.word	0xfffffeff
 8003b8c:	fffffedf 	.word	0xfffffedf

08003b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	000a      	movs	r2, r1
 8003bba:	1cbb      	adds	r3, r7, #2
 8003bbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b08e      	sub	sp, #56	@ 0x38
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd0:	231a      	movs	r3, #26
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4ac3      	ldr	r2, [pc, #780]	@ (8003f08 <UART_SetConfig+0x340>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4abe      	ldr	r2, [pc, #760]	@ (8003f0c <UART_SetConfig+0x344>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4ab8      	ldr	r2, [pc, #736]	@ (8003f10 <UART_SetConfig+0x348>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4ab4      	ldr	r2, [pc, #720]	@ (8003f14 <UART_SetConfig+0x34c>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4ab0      	ldr	r2, [pc, #704]	@ (8003f18 <UART_SetConfig+0x350>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d131      	bne.n	8003cc0 <UART_SetConfig+0xf8>
 8003c5c:	4baf      	ldr	r3, [pc, #700]	@ (8003f1c <UART_SetConfig+0x354>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	2203      	movs	r2, #3
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d01d      	beq.n	8003ca4 <UART_SetConfig+0xdc>
 8003c68:	d823      	bhi.n	8003cb2 <UART_SetConfig+0xea>
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d00c      	beq.n	8003c88 <UART_SetConfig+0xc0>
 8003c6e:	d820      	bhi.n	8003cb2 <UART_SetConfig+0xea>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <UART_SetConfig+0xb2>
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d00e      	beq.n	8003c96 <UART_SetConfig+0xce>
 8003c78:	e01b      	b.n	8003cb2 <UART_SetConfig+0xea>
 8003c7a:	231b      	movs	r3, #27
 8003c7c:	2218      	movs	r2, #24
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	19db      	adds	r3, r3, r7
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e0b4      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003c88:	231b      	movs	r3, #27
 8003c8a:	2218      	movs	r2, #24
 8003c8c:	189b      	adds	r3, r3, r2
 8003c8e:	19db      	adds	r3, r3, r7
 8003c90:	2202      	movs	r2, #2
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e0ad      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003c96:	231b      	movs	r3, #27
 8003c98:	2218      	movs	r2, #24
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	19db      	adds	r3, r3, r7
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e0a6      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003ca4:	231b      	movs	r3, #27
 8003ca6:	2218      	movs	r2, #24
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	2208      	movs	r2, #8
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e09f      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	2218      	movs	r2, #24
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	2210      	movs	r2, #16
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e098      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a96      	ldr	r2, [pc, #600]	@ (8003f20 <UART_SetConfig+0x358>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d131      	bne.n	8003d2e <UART_SetConfig+0x166>
 8003cca:	4b94      	ldr	r3, [pc, #592]	@ (8003f1c <UART_SetConfig+0x354>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cce:	220c      	movs	r2, #12
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d01d      	beq.n	8003d12 <UART_SetConfig+0x14a>
 8003cd6:	d823      	bhi.n	8003d20 <UART_SetConfig+0x158>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d00c      	beq.n	8003cf6 <UART_SetConfig+0x12e>
 8003cdc:	d820      	bhi.n	8003d20 <UART_SetConfig+0x158>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <UART_SetConfig+0x120>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d00e      	beq.n	8003d04 <UART_SetConfig+0x13c>
 8003ce6:	e01b      	b.n	8003d20 <UART_SetConfig+0x158>
 8003ce8:	231b      	movs	r3, #27
 8003cea:	2218      	movs	r2, #24
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	19db      	adds	r3, r3, r7
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e07d      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003cf6:	231b      	movs	r3, #27
 8003cf8:	2218      	movs	r2, #24
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2202      	movs	r2, #2
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e076      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d04:	231b      	movs	r3, #27
 8003d06:	2218      	movs	r2, #24
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	19db      	adds	r3, r3, r7
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e06f      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d12:	231b      	movs	r3, #27
 8003d14:	2218      	movs	r2, #24
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e068      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d20:	231b      	movs	r3, #27
 8003d22:	2218      	movs	r2, #24
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	19db      	adds	r3, r3, r7
 8003d28:	2210      	movs	r2, #16
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e061      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7c      	ldr	r2, [pc, #496]	@ (8003f24 <UART_SetConfig+0x35c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d106      	bne.n	8003d46 <UART_SetConfig+0x17e>
 8003d38:	231b      	movs	r3, #27
 8003d3a:	2218      	movs	r2, #24
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e055      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <UART_SetConfig+0x360>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d106      	bne.n	8003d5e <UART_SetConfig+0x196>
 8003d50:	231b      	movs	r3, #27
 8003d52:	2218      	movs	r2, #24
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	19db      	adds	r3, r3, r7
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e049      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6b      	ldr	r2, [pc, #428]	@ (8003f10 <UART_SetConfig+0x348>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d13e      	bne.n	8003de6 <UART_SetConfig+0x21e>
 8003d68:	4b6c      	ldr	r3, [pc, #432]	@ (8003f1c <UART_SetConfig+0x354>)
 8003d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d6c:	23c0      	movs	r3, #192	@ 0xc0
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	4013      	ands	r3, r2
 8003d72:	22c0      	movs	r2, #192	@ 0xc0
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <UART_SetConfig+0x202>
 8003d7a:	22c0      	movs	r2, #192	@ 0xc0
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d82a      	bhi.n	8003dd8 <UART_SetConfig+0x210>
 8003d82:	2280      	movs	r2, #128	@ 0x80
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d011      	beq.n	8003dae <UART_SetConfig+0x1e6>
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d822      	bhi.n	8003dd8 <UART_SetConfig+0x210>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <UART_SetConfig+0x1d8>
 8003d96:	2280      	movs	r2, #128	@ 0x80
 8003d98:	00d2      	lsls	r2, r2, #3
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <UART_SetConfig+0x1f4>
 8003d9e:	e01b      	b.n	8003dd8 <UART_SetConfig+0x210>
 8003da0:	231b      	movs	r3, #27
 8003da2:	2218      	movs	r2, #24
 8003da4:	189b      	adds	r3, r3, r2
 8003da6:	19db      	adds	r3, r3, r7
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e021      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003dae:	231b      	movs	r3, #27
 8003db0:	2218      	movs	r2, #24
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	19db      	adds	r3, r3, r7
 8003db6:	2202      	movs	r2, #2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e01a      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003dbc:	231b      	movs	r3, #27
 8003dbe:	2218      	movs	r2, #24
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	19db      	adds	r3, r3, r7
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e013      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003dca:	231b      	movs	r3, #27
 8003dcc:	2218      	movs	r2, #24
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	19db      	adds	r3, r3, r7
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e00c      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003dd8:	231b      	movs	r3, #27
 8003dda:	2218      	movs	r2, #24
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	2210      	movs	r2, #16
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x22a>
 8003de6:	231b      	movs	r3, #27
 8003de8:	2218      	movs	r2, #24
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	19db      	adds	r3, r3, r7
 8003dee:	2210      	movs	r2, #16
 8003df0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a46      	ldr	r2, [pc, #280]	@ (8003f10 <UART_SetConfig+0x348>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d000      	beq.n	8003dfe <UART_SetConfig+0x236>
 8003dfc:	e09a      	b.n	8003f34 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dfe:	231b      	movs	r3, #27
 8003e00:	2218      	movs	r2, #24
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	19db      	adds	r3, r3, r7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d01d      	beq.n	8003e48 <UART_SetConfig+0x280>
 8003e0c:	dc20      	bgt.n	8003e50 <UART_SetConfig+0x288>
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d015      	beq.n	8003e3e <UART_SetConfig+0x276>
 8003e12:	dc1d      	bgt.n	8003e50 <UART_SetConfig+0x288>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <UART_SetConfig+0x256>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d005      	beq.n	8003e28 <UART_SetConfig+0x260>
 8003e1c:	e018      	b.n	8003e50 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1e:	f7ff f9f9 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003e22:	0003      	movs	r3, r0
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e26:	e01c      	b.n	8003e62 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e28:	4b3c      	ldr	r3, [pc, #240]	@ (8003f1c <UART_SetConfig+0x354>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d002      	beq.n	8003e38 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e32:	4b3e      	ldr	r3, [pc, #248]	@ (8003f2c <UART_SetConfig+0x364>)
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <UART_SetConfig+0x368>)
 8003e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e3c:	e011      	b.n	8003e62 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7ff f93b 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003e42:	0003      	movs	r3, r0
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e46:	e00c      	b.n	8003e62 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e4e:	e008      	b.n	8003e62 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003e54:	231a      	movs	r3, #26
 8003e56:	2218      	movs	r2, #24
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	19db      	adds	r3, r3, r7
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
        break;
 8003e60:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d100      	bne.n	8003e6a <UART_SetConfig+0x2a2>
 8003e68:	e133      	b.n	80040d2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	0013      	movs	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d305      	bcc.n	8003e86 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d906      	bls.n	8003e94 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003e86:	231a      	movs	r3, #26
 8003e88:	2218      	movs	r2, #24
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	19db      	adds	r3, r3, r7
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e11e      	b.n	80040d2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	6939      	ldr	r1, [r7, #16]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	000b      	movs	r3, r1
 8003ea2:	0e1b      	lsrs	r3, r3, #24
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	0205      	lsls	r5, r0, #8
 8003ea8:	431d      	orrs	r5, r3
 8003eaa:	000b      	movs	r3, r1
 8003eac:	021c      	lsls	r4, r3, #8
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68b8      	ldr	r0, [r7, #8]
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	1900      	adds	r0, r0, r4
 8003ec0:	4169      	adcs	r1, r5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f7fc f9a6 	bl	8000220 <__aeabi_uldivmod>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	000b      	movs	r3, r1
 8003ed8:	0013      	movs	r3, r2
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003edc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ede:	23c0      	movs	r3, #192	@ 0xc0
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d309      	bcc.n	8003efa <UART_SetConfig+0x332>
 8003ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	035b      	lsls	r3, r3, #13
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d204      	bcs.n	8003efa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	e0eb      	b.n	80040d2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003efa:	231a      	movs	r3, #26
 8003efc:	2218      	movs	r2, #24
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	19db      	adds	r3, r3, r7
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e0e4      	b.n	80040d2 <UART_SetConfig+0x50a>
 8003f08:	efff69f3 	.word	0xefff69f3
 8003f0c:	ffffcfff 	.word	0xffffcfff
 8003f10:	40004800 	.word	0x40004800
 8003f14:	fffff4ff 	.word	0xfffff4ff
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40004400 	.word	0x40004400
 8003f24:	40004c00 	.word	0x40004c00
 8003f28:	40005000 	.word	0x40005000
 8003f2c:	003d0900 	.word	0x003d0900
 8003f30:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	2380      	movs	r3, #128	@ 0x80
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d000      	beq.n	8003f42 <UART_SetConfig+0x37a>
 8003f40:	e070      	b.n	8004024 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003f42:	231b      	movs	r3, #27
 8003f44:	2218      	movs	r2, #24
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	19db      	adds	r3, r3, r7
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d822      	bhi.n	8003f96 <UART_SetConfig+0x3ce>
 8003f50:	009a      	lsls	r2, r3, #2
 8003f52:	4b67      	ldr	r3, [pc, #412]	@ (80040f0 <UART_SetConfig+0x528>)
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5a:	f7ff f95b 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f62:	e021      	b.n	8003fa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff f96c 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f6c:	e01c      	b.n	8003fa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f6e:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <UART_SetConfig+0x52c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2210      	movs	r2, #16
 8003f74:	4013      	ands	r3, r2
 8003f76:	d002      	beq.n	8003f7e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f78:	4b5f      	ldr	r3, [pc, #380]	@ (80040f8 <UART_SetConfig+0x530>)
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f7c:	e014      	b.n	8003fa8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80040fc <UART_SetConfig+0x534>)
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f82:	e011      	b.n	8003fa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f84:	f7ff f898 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f8c:	e00c      	b.n	8003fa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f94:	e008      	b.n	8003fa8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f9a:	231a      	movs	r3, #26
 8003f9c:	2218      	movs	r2, #24
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
        break;
 8003fa6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d100      	bne.n	8003fb0 <UART_SetConfig+0x3e8>
 8003fae:	e090      	b.n	80040d2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	005a      	lsls	r2, r3, #1
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	18d2      	adds	r2, r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	0010      	movs	r0, r2
 8003fc4:	f7fc f8a0 	bl	8000108 <__udivsi3>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d921      	bls.n	8004016 <UART_SetConfig+0x44e>
 8003fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	025b      	lsls	r3, r3, #9
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d21c      	bcs.n	8004016 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	200e      	movs	r0, #14
 8003fe2:	2418      	movs	r4, #24
 8003fe4:	1903      	adds	r3, r0, r4
 8003fe6:	19db      	adds	r3, r3, r7
 8003fe8:	210f      	movs	r1, #15
 8003fea:	438a      	bics	r2, r1
 8003fec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	1903      	adds	r3, r0, r4
 8003ffc:	19db      	adds	r3, r3, r7
 8003ffe:	1902      	adds	r2, r0, r4
 8004000:	19d2      	adds	r2, r2, r7
 8004002:	8812      	ldrh	r2, [r2, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1902      	adds	r2, r0, r4
 800400e:	19d2      	adds	r2, r2, r7
 8004010:	8812      	ldrh	r2, [r2, #0]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e05d      	b.n	80040d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004016:	231a      	movs	r3, #26
 8004018:	2218      	movs	r2, #24
 800401a:	189b      	adds	r3, r3, r2
 800401c:	19db      	adds	r3, r3, r7
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e056      	b.n	80040d2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004024:	231b      	movs	r3, #27
 8004026:	2218      	movs	r2, #24
 8004028:	189b      	adds	r3, r3, r2
 800402a:	19db      	adds	r3, r3, r7
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d822      	bhi.n	8004078 <UART_SetConfig+0x4b0>
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <UART_SetConfig+0x538>)
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7ff f8ea 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8004040:	0003      	movs	r3, r0
 8004042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004044:	e021      	b.n	800408a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004046:	f7ff f8fb 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 800404a:	0003      	movs	r3, r0
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800404e:	e01c      	b.n	800408a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004050:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <UART_SetConfig+0x52c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	4013      	ands	r3, r2
 8004058:	d002      	beq.n	8004060 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800405a:	4b27      	ldr	r3, [pc, #156]	@ (80040f8 <UART_SetConfig+0x530>)
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800405e:	e014      	b.n	800408a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004060:	4b26      	ldr	r3, [pc, #152]	@ (80040fc <UART_SetConfig+0x534>)
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004064:	e011      	b.n	800408a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7ff f827 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800406a:	0003      	movs	r3, r0
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800406e:	e00c      	b.n	800408a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004076:	e008      	b.n	800408a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800407c:	231a      	movs	r3, #26
 800407e:	2218      	movs	r2, #24
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
        break;
 8004088:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d020      	beq.n	80040d2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085a      	lsrs	r2, r3, #1
 8004096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004098:	18d2      	adds	r2, r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0019      	movs	r1, r3
 80040a0:	0010      	movs	r0, r2
 80040a2:	f7fc f831 	bl	8000108 <__udivsi3>
 80040a6:	0003      	movs	r3, r0
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d90a      	bls.n	80040c6 <UART_SetConfig+0x4fe>
 80040b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	025b      	lsls	r3, r3, #9
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d205      	bcs.n	80040c6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	b29a      	uxth	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e005      	b.n	80040d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80040c6:	231a      	movs	r3, #26
 80040c8:	2218      	movs	r2, #24
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2200      	movs	r2, #0
 80040d6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2200      	movs	r2, #0
 80040dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040de:	231a      	movs	r3, #26
 80040e0:	2218      	movs	r2, #24
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	781b      	ldrb	r3, [r3, #0]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b00e      	add	sp, #56	@ 0x38
 80040ee:	bdb0      	pop	{r4, r5, r7, pc}
 80040f0:	08004680 	.word	0x08004680
 80040f4:	40021000 	.word	0x40021000
 80040f8:	003d0900 	.word	0x003d0900
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	080046a4 	.word	0x080046a4

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	2201      	movs	r2, #1
 8004112:	4013      	ands	r3, r2
 8004114:	d00b      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a4a      	ldr	r2, [pc, #296]	@ (8004248 <UART_AdvFeatureConfig+0x144>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	d00b      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a43      	ldr	r2, [pc, #268]	@ (800424c <UART_AdvFeatureConfig+0x148>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d00b      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a3b      	ldr	r2, [pc, #236]	@ (8004250 <UART_AdvFeatureConfig+0x14c>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	d00b      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4a34      	ldr	r2, [pc, #208]	@ (8004254 <UART_AdvFeatureConfig+0x150>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	2210      	movs	r2, #16
 800419a:	4013      	ands	r3, r2
 800419c:	d00b      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <UART_AdvFeatureConfig+0x154>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	2220      	movs	r2, #32
 80041bc:	4013      	ands	r3, r2
 80041be:	d00b      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4a25      	ldr	r2, [pc, #148]	@ (800425c <UART_AdvFeatureConfig+0x158>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	4013      	ands	r3, r2
 80041e0:	d01d      	beq.n	800421e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <UART_AdvFeatureConfig+0x15c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	035b      	lsls	r3, r3, #13
 8004202:	429a      	cmp	r2, r3
 8004204:	d10b      	bne.n	800421e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <UART_AdvFeatureConfig+0x160>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	2280      	movs	r2, #128	@ 0x80
 8004224:	4013      	ands	r3, r2
 8004226:	d00b      	beq.n	8004240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a0e      	ldr	r2, [pc, #56]	@ (8004268 <UART_AdvFeatureConfig+0x164>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	fffdffff 	.word	0xfffdffff
 800424c:	fffeffff 	.word	0xfffeffff
 8004250:	fffbffff 	.word	0xfffbffff
 8004254:	ffff7fff 	.word	0xffff7fff
 8004258:	ffffefff 	.word	0xffffefff
 800425c:	ffffdfff 	.word	0xffffdfff
 8004260:	ffefffff 	.word	0xffefffff
 8004264:	ff9fffff 	.word	0xff9fffff
 8004268:	fff7ffff 	.word	0xfff7ffff

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b092      	sub	sp, #72	@ 0x48
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2284      	movs	r2, #132	@ 0x84
 8004278:	2100      	movs	r1, #0
 800427a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800427c:	f7fc fef0 	bl	8001060 <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2208      	movs	r2, #8
 800428c:	4013      	ands	r3, r2
 800428e:	2b08      	cmp	r3, #8
 8004290:	d12c      	bne.n	80042ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004294:	2280      	movs	r2, #128	@ 0x80
 8004296:	0391      	lsls	r1, r2, #14
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4a46      	ldr	r2, [pc, #280]	@ (80043b4 <UART_CheckIdleState+0x148>)
 800429c:	9200      	str	r2, [sp, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	f000 f88c 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d021      	beq.n	80042ec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042b2:	2301      	movs	r3, #1
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2180      	movs	r1, #128	@ 0x80
 80042ca:	438a      	bics	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2278      	movs	r2, #120	@ 0x78
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e05f      	b.n	80043ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2204      	movs	r2, #4
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d146      	bne.n	8004388 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	2280      	movs	r2, #128	@ 0x80
 80042fe:	03d1      	lsls	r1, r2, #15
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <UART_CheckIdleState+0x148>)
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	f000 f858 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d03b      	beq.n	8004388 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	60fb      	str	r3, [r7, #12]
  return(result);
 8004316:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
 800431a:	2301      	movs	r3, #1
 800431c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			@ (mov r8, r8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4921      	ldr	r1, [pc, #132]	@ (80043b8 <UART_CheckIdleState+0x14c>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004342:	f3ef 8310 	mrs	r3, PRIMASK
 8004346:	61bb      	str	r3, [r7, #24]
  return(result);
 8004348:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	633b      	str	r3, [r7, #48]	@ 0x30
 800434c:	2301      	movs	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	438a      	bics	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	@ 0x80
 8004378:	2120      	movs	r1, #32
 800437a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2278      	movs	r2, #120	@ 0x78
 8004380:	2100      	movs	r1, #0
 8004382:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e011      	b.n	80043ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2280      	movs	r2, #128	@ 0x80
 8004392:	2120      	movs	r1, #32
 8004394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2278      	movs	r2, #120	@ 0x78
 80043a6:	2100      	movs	r1, #0
 80043a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b010      	add	sp, #64	@ 0x40
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	01ffffff 	.word	0x01ffffff
 80043b8:	fffffedf 	.word	0xfffffedf

080043bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	1dfb      	adds	r3, r7, #7
 80043ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	e04b      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d048      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fc fe44 	bl	8001060 <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e04b      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	4013      	ands	r3, r2
 80043f8:	d035      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2208      	movs	r2, #8
 8004402:	4013      	ands	r3, r2
 8004404:	2b08      	cmp	r3, #8
 8004406:	d111      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2208      	movs	r2, #8
 800440e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	0018      	movs	r0, r3
 8004414:	f000 f83c 	bl	8004490 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2284      	movs	r2, #132	@ 0x84
 800441c:	2108      	movs	r1, #8
 800441e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2278      	movs	r2, #120	@ 0x78
 8004424:	2100      	movs	r1, #0
 8004426:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e02c      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	401a      	ands	r2, r3
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	429a      	cmp	r2, r3
 800443e:	d112      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	0112      	lsls	r2, r2, #4
 8004448:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f81f 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2284      	movs	r2, #132	@ 0x84
 8004456:	2120      	movs	r1, #32
 8004458:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2278      	movs	r2, #120	@ 0x78
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	425a      	negs	r2, r3
 8004476:	4153      	adcs	r3, r2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	001a      	movs	r2, r3
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d0a4      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b004      	add	sp, #16
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	@ 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004498:	f3ef 8310 	mrs	r3, PRIMASK
 800449c:	617b      	str	r3, [r7, #20]
  return(result);
 800449e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4926      	ldr	r1, [pc, #152]	@ (8004554 <UART_EndRxTransfer+0xc4>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ca:	f3ef 8310 	mrs	r3, PRIMASK
 80044ce:	623b      	str	r3, [r7, #32]
  return(result);
 80044d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d4:	2301      	movs	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004500:	2b01      	cmp	r3, #1
 8004502:	d118      	bne.n	8004536 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004504:	f3ef 8310 	mrs	r3, PRIMASK
 8004508:	60bb      	str	r3, [r7, #8]
  return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800450e:	2301      	movs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2110      	movs	r1, #16
 8004526:	438a      	bics	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2280      	movs	r2, #128	@ 0x80
 800453a:	2120      	movs	r1, #32
 800453c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b00e      	add	sp, #56	@ 0x38
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	fffffedf 	.word	0xfffffedf

08004558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	225a      	movs	r2, #90	@ 0x5a
 800456a:	2100      	movs	r1, #0
 800456c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2252      	movs	r2, #82	@ 0x52
 8004572:	2100      	movs	r1, #0
 8004574:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff fb11 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bd80      	pop	{r7, pc}

08004586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	60bb      	str	r3, [r7, #8]
  return(result);
 8004594:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	2301      	movs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2140      	movs	r1, #64	@ 0x40
 80045b0:	438a      	bics	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7ff fade 	bl	8003b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UARTEx_WakeupCallback>:
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <memset>:
 80045ec:	0003      	movs	r3, r0
 80045ee:	1882      	adds	r2, r0, r2
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	7019      	strb	r1, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	2600      	movs	r6, #0
 8004600:	4c0c      	ldr	r4, [pc, #48]	@ (8004634 <__libc_init_array+0x38>)
 8004602:	4d0d      	ldr	r5, [pc, #52]	@ (8004638 <__libc_init_array+0x3c>)
 8004604:	1b64      	subs	r4, r4, r5
 8004606:	10a4      	asrs	r4, r4, #2
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	2600      	movs	r6, #0
 800460e:	f000 f819 	bl	8004644 <_init>
 8004612:	4c0a      	ldr	r4, [pc, #40]	@ (800463c <__libc_init_array+0x40>)
 8004614:	4d0a      	ldr	r5, [pc, #40]	@ (8004640 <__libc_init_array+0x44>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	00b3      	lsls	r3, r6, #2
 8004622:	58eb      	ldr	r3, [r5, r3]
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	00b3      	lsls	r3, r6, #2
 800462c:	58eb      	ldr	r3, [r5, r3]
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	080046d0 	.word	0x080046d0
 8004638:	080046d0 	.word	0x080046d0
 800463c:	080046d4 	.word	0x080046d4
 8004640:	080046d0 	.word	0x080046d0

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
